{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMZzBzc94yh8kKTiFLDNyzV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ElizaOG11/EDA-Analisis-exploratorio-Taller-1/blob/main/An%C3%A1lisis_bivariado_calidad_corrientes_pop.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **ANÁLISIS BIVARIADO**"
      ],
      "metadata": {
        "id": "fsqvrlPsSgUo"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "B6mOWsNdRNta"
      },
      "outputs": [],
      "source": [
        "#Importar las librerías\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import statsmodels.formula.api as smf\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Leer el dataframe y conocer la base de datos\n",
        "df = pd.read_csv('/content/calidad_corrientes_transf_pop')\n",
        "df.head()"
      ],
      "metadata": {
        "id": "JaI3XQJiRr1Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "12eb3fcb-877b-40e6-ed9b-a8d78f4ad568"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Ano       Epoca  CORRIENTE           PUNTO DE MONITOREO_Original  \\\n",
              "0  2010        Seca  R¡o Cauca      R.Cauca Puente Estaci¢n Julumito   \n",
              "1  2010        Seca  R¡o Cauca  R¡o Cauca puente met lico Vivero CRC   \n",
              "2  2010  Transici¢n  R¡o Cauca      R.Cauca Puente Estaci¢n Julumito   \n",
              "3  2010  Transici¢n  R¡o Cauca  R¡o Cauca puente met lico Vivero CRC   \n",
              "4  2011     Lluvias  R¡o Cauca                     Estaci¢n Julumito   \n",
              "\n",
              "  MUNICIPIO_AJUSTADO  ALCALINIDAD  COLOR UPC  CONDUCTIVIDAD  DBO   DQO  \\\n",
              "0            Popay n         0.95       38.0          237.0  1.2   4.0   \n",
              "1            Popay n         0.95       75.0          190.6  0.5   4.0   \n",
              "2            Popay n         0.95       49.0          100.0  2.9  10.0   \n",
              "3            Popay n         0.95       57.0          128.0  0.5  23.0   \n",
              "4            Popay n         0.95       20.0          116.2  1.6  10.0   \n",
              "\n",
              "   DUREZA  NITRATOS  NITRITOS  OXIGENO DISUELTO    PH    SST  TEMPERATURA  \\\n",
              "0    53.5      2.53      0.09              8.01  5.98   58.3         17.2   \n",
              "1    34.0      0.80      0.02             13.00  5.81   35.0         16.6   \n",
              "2    21.4      2.14      0.18              5.96  6.53  115.0         16.1   \n",
              "3    21.4      1.72      0.14              6.29  6.43  156.0         15.2   \n",
              "4    48.4      0.90      0.10              4.50  7.30  128.0         18.5   \n",
              "\n",
              "   TURBIEDAD  \n",
              "0        9.0  \n",
              "1        1.3  \n",
              "2       33.2  \n",
              "3       27.8  \n",
              "4        8.4  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f149e71-fca6-4900-852b-830aa4551f50\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ano</th>\n",
              "      <th>Epoca</th>\n",
              "      <th>CORRIENTE</th>\n",
              "      <th>PUNTO DE MONITOREO_Original</th>\n",
              "      <th>MUNICIPIO_AJUSTADO</th>\n",
              "      <th>ALCALINIDAD</th>\n",
              "      <th>COLOR UPC</th>\n",
              "      <th>CONDUCTIVIDAD</th>\n",
              "      <th>DBO</th>\n",
              "      <th>DQO</th>\n",
              "      <th>DUREZA</th>\n",
              "      <th>NITRATOS</th>\n",
              "      <th>NITRITOS</th>\n",
              "      <th>OXIGENO DISUELTO</th>\n",
              "      <th>PH</th>\n",
              "      <th>SST</th>\n",
              "      <th>TEMPERATURA</th>\n",
              "      <th>TURBIEDAD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010</td>\n",
              "      <td>Seca</td>\n",
              "      <td>R¡o Cauca</td>\n",
              "      <td>R.Cauca Puente Estaci¢n Julumito</td>\n",
              "      <td>Popay n</td>\n",
              "      <td>0.95</td>\n",
              "      <td>38.0</td>\n",
              "      <td>237.0</td>\n",
              "      <td>1.2</td>\n",
              "      <td>4.0</td>\n",
              "      <td>53.5</td>\n",
              "      <td>2.53</td>\n",
              "      <td>0.09</td>\n",
              "      <td>8.01</td>\n",
              "      <td>5.98</td>\n",
              "      <td>58.3</td>\n",
              "      <td>17.2</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2010</td>\n",
              "      <td>Seca</td>\n",
              "      <td>R¡o Cauca</td>\n",
              "      <td>R¡o Cauca puente met lico Vivero CRC</td>\n",
              "      <td>Popay n</td>\n",
              "      <td>0.95</td>\n",
              "      <td>75.0</td>\n",
              "      <td>190.6</td>\n",
              "      <td>0.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.02</td>\n",
              "      <td>13.00</td>\n",
              "      <td>5.81</td>\n",
              "      <td>35.0</td>\n",
              "      <td>16.6</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2010</td>\n",
              "      <td>Transici¢n</td>\n",
              "      <td>R¡o Cauca</td>\n",
              "      <td>R.Cauca Puente Estaci¢n Julumito</td>\n",
              "      <td>Popay n</td>\n",
              "      <td>0.95</td>\n",
              "      <td>49.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2.9</td>\n",
              "      <td>10.0</td>\n",
              "      <td>21.4</td>\n",
              "      <td>2.14</td>\n",
              "      <td>0.18</td>\n",
              "      <td>5.96</td>\n",
              "      <td>6.53</td>\n",
              "      <td>115.0</td>\n",
              "      <td>16.1</td>\n",
              "      <td>33.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2010</td>\n",
              "      <td>Transici¢n</td>\n",
              "      <td>R¡o Cauca</td>\n",
              "      <td>R¡o Cauca puente met lico Vivero CRC</td>\n",
              "      <td>Popay n</td>\n",
              "      <td>0.95</td>\n",
              "      <td>57.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>23.0</td>\n",
              "      <td>21.4</td>\n",
              "      <td>1.72</td>\n",
              "      <td>0.14</td>\n",
              "      <td>6.29</td>\n",
              "      <td>6.43</td>\n",
              "      <td>156.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>27.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011</td>\n",
              "      <td>Lluvias</td>\n",
              "      <td>R¡o Cauca</td>\n",
              "      <td>Estaci¢n Julumito</td>\n",
              "      <td>Popay n</td>\n",
              "      <td>0.95</td>\n",
              "      <td>20.0</td>\n",
              "      <td>116.2</td>\n",
              "      <td>1.6</td>\n",
              "      <td>10.0</td>\n",
              "      <td>48.4</td>\n",
              "      <td>0.90</td>\n",
              "      <td>0.10</td>\n",
              "      <td>4.50</td>\n",
              "      <td>7.30</td>\n",
              "      <td>128.0</td>\n",
              "      <td>18.5</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f149e71-fca6-4900-852b-830aa4551f50')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2f149e71-fca6-4900-852b-830aa4551f50 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2f149e71-fca6-4900-852b-830aa4551f50');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b2dffe38-3d4b-4f2c-babf-4e2639b9699e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b2dffe38-3d4b-4f2c-babf-4e2639b9699e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b2dffe38-3d4b-4f2c-babf-4e2639b9699e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 78,\n  \"fields\": [\n    {\n      \"column\": \"Ano\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 2010,\n        \"max\": 2024,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          2019,\n          2021,\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Epoca\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Seca\",\n          \"Transici\\u00a2n\",\n          \"Lluvias\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CORRIENTE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"R\\u00a1o Cauca\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PUNTO DE MONITOREO_Original\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"R\\u00a1o Cauca puente met\\u00a0lico Vivero CRC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO_AJUSTADO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Popay\\u00a0n\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALCALINIDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.666009825020666,\n        \"min\": 0.49,\n        \"max\": 53.2,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          2.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COLOR UPC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86.5877525660465,\n        \"min\": 2.0,\n        \"max\": 402.0,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          38.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CONDUCTIVIDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 357.5797402721481,\n        \"min\": 5.2,\n        \"max\": 2689.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          116.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DBO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.611020496951844,\n        \"min\": 0.5,\n        \"max\": 20.8,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DQO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.735943282012514,\n        \"min\": 4.0,\n        \"max\": 70.0,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          22.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DUREZA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.607948816439198,\n        \"min\": 14.4,\n        \"max\": 237.0,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          69.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NITRATOS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1911962847957047,\n        \"min\": 0.01,\n        \"max\": 4.26,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          3.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NITRITOS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3724697962039998,\n        \"min\": 0.0,\n        \"max\": 2.15,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OXIGENO DISUELTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.506651002750552,\n        \"min\": 4.153,\n        \"max\": 13.0,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          5.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2412839401925009,\n        \"min\": 2.82,\n        \"max\": 7.9,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          6.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SST\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57.41158965275981,\n        \"min\": 10.0,\n        \"max\": 369.0,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          128.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TEMPERATURA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6952333371150026,\n        \"min\": 13.2,\n        \"max\": 21.3,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          16.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TURBIEDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.448426395103695,\n        \"min\": 0.2,\n        \"max\": 156.0,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          50.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cambiar caracteres especiales por letras sin tildes y estandarizar los valores en las columnas tipo float\n",
        "df['CORRIENTE'] = df['CORRIENTE'].replace('R¡o Cauca', 'Rio Cauca')\n",
        "df['CORRIENTE'] = df['CORRIENTE'].replace('R. Cauca', 'Rio Cauca')\n",
        "df['Epoca'] = df['Epoca'].replace('Transici¢n', 'Transicion')\n",
        "df['MUNICIPIO_AJUSTADO'] = df['MUNICIPIO_AJUSTADO'].replace('Popay\\xa0n', 'Popayan')\n",
        "df['PUNTO DE MONITOREO_Original'].replace('R¡o Cauca puente met\\xa0lico Vivero CRC', 'Puente vivero CRC',inplace=True)\n",
        "df['PUNTO DE MONITOREO_Original'].replace('Estaci\\xc3\\xb3n Julumito', 'Estacion Julumito',inplace=True)\n",
        "df['PUNTO DE MONITOREO_Original'].replace('R.Cauca Puente Estaci¢n Julumito', 'Estacion Julumito',inplace=True)\n",
        "df['PUNTO DE MONITOREO_Original'].replace('R¡o Cauca puente met lico Vivero CRC', 'Puente vivero CRC',inplace=True)\n",
        "df['PUNTO DE MONITOREO_Original'].replace('Estaci¢n Julumito', 'Estacion Julumito',inplace=True)\n",
        "df['PUNTO DE MONITOREO_Original'].replace('R¡o Cauca estaci¢n Julumito', 'Estacion Julumito',inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "BPG37UtEqSq5",
        "outputId": "27ea9c80-5a53-4d3f-fe33-b5e6bb8c69cb"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2113758540.py:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['PUNTO DE MONITOREO_Original'].replace('R¡o Cauca puente met\\xa0lico Vivero CRC', 'Puente vivero CRC',inplace=True)\n",
            "/tmp/ipython-input-2113758540.py:7: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['PUNTO DE MONITOREO_Original'].replace('Estaci\\xc3\\xb3n Julumito', 'Estacion Julumito',inplace=True)\n",
            "/tmp/ipython-input-2113758540.py:8: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['PUNTO DE MONITOREO_Original'].replace('R.Cauca Puente Estaci¢n Julumito', 'Estacion Julumito',inplace=True)\n",
            "/tmp/ipython-input-2113758540.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['PUNTO DE MONITOREO_Original'].replace('R¡o Cauca puente met lico Vivero CRC', 'Puente vivero CRC',inplace=True)\n",
            "/tmp/ipython-input-2113758540.py:10: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['PUNTO DE MONITOREO_Original'].replace('Estaci¢n Julumito', 'Estacion Julumito',inplace=True)\n",
            "/tmp/ipython-input-2113758540.py:11: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['PUNTO DE MONITOREO_Original'].replace('R¡o Cauca estaci¢n Julumito', 'Estacion Julumito',inplace=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Ano       Epoca  CORRIENTE PUNTO DE MONITOREO_Original MUNICIPIO_AJUSTADO  \\\n",
              "0  2010        Seca  Rio Cauca           Estacion Julumito            Popayan   \n",
              "1  2010        Seca  Rio Cauca           Puente vivero CRC            Popayan   \n",
              "2  2010  Transicion  Rio Cauca           Estacion Julumito            Popayan   \n",
              "3  2010  Transicion  Rio Cauca           Puente vivero CRC            Popayan   \n",
              "4  2011     Lluvias  Rio Cauca           Estacion Julumito            Popayan   \n",
              "\n",
              "   ALCALINIDAD  COLOR UPC  CONDUCTIVIDAD  DBO   DQO  DUREZA  NITRATOS  \\\n",
              "0         0.95       38.0          237.0  1.2   4.0    53.5      2.53   \n",
              "1         0.95       75.0          190.6  0.5   4.0    34.0      0.80   \n",
              "2         0.95       49.0          100.0  2.9  10.0    21.4      2.14   \n",
              "3         0.95       57.0          128.0  0.5  23.0    21.4      1.72   \n",
              "4         0.95       20.0          116.2  1.6  10.0    48.4      0.90   \n",
              "\n",
              "   NITRITOS  OXIGENO DISUELTO    PH    SST  TEMPERATURA  TURBIEDAD  \n",
              "0      0.09              8.01  5.98   58.3         17.2        9.0  \n",
              "1      0.02             13.00  5.81   35.0         16.6        1.3  \n",
              "2      0.18              5.96  6.53  115.0         16.1       33.2  \n",
              "3      0.14              6.29  6.43  156.0         15.2       27.8  \n",
              "4      0.10              4.50  7.30  128.0         18.5        8.4  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5bf63a4-bbb9-472e-9be7-90ce55ec1dac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ano</th>\n",
              "      <th>Epoca</th>\n",
              "      <th>CORRIENTE</th>\n",
              "      <th>PUNTO DE MONITOREO_Original</th>\n",
              "      <th>MUNICIPIO_AJUSTADO</th>\n",
              "      <th>ALCALINIDAD</th>\n",
              "      <th>COLOR UPC</th>\n",
              "      <th>CONDUCTIVIDAD</th>\n",
              "      <th>DBO</th>\n",
              "      <th>DQO</th>\n",
              "      <th>DUREZA</th>\n",
              "      <th>NITRATOS</th>\n",
              "      <th>NITRITOS</th>\n",
              "      <th>OXIGENO DISUELTO</th>\n",
              "      <th>PH</th>\n",
              "      <th>SST</th>\n",
              "      <th>TEMPERATURA</th>\n",
              "      <th>TURBIEDAD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010</td>\n",
              "      <td>Seca</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Estacion Julumito</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>0.95</td>\n",
              "      <td>38.0</td>\n",
              "      <td>237.0</td>\n",
              "      <td>1.2</td>\n",
              "      <td>4.0</td>\n",
              "      <td>53.5</td>\n",
              "      <td>2.53</td>\n",
              "      <td>0.09</td>\n",
              "      <td>8.01</td>\n",
              "      <td>5.98</td>\n",
              "      <td>58.3</td>\n",
              "      <td>17.2</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2010</td>\n",
              "      <td>Seca</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Puente vivero CRC</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>0.95</td>\n",
              "      <td>75.0</td>\n",
              "      <td>190.6</td>\n",
              "      <td>0.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.02</td>\n",
              "      <td>13.00</td>\n",
              "      <td>5.81</td>\n",
              "      <td>35.0</td>\n",
              "      <td>16.6</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2010</td>\n",
              "      <td>Transicion</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Estacion Julumito</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>0.95</td>\n",
              "      <td>49.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2.9</td>\n",
              "      <td>10.0</td>\n",
              "      <td>21.4</td>\n",
              "      <td>2.14</td>\n",
              "      <td>0.18</td>\n",
              "      <td>5.96</td>\n",
              "      <td>6.53</td>\n",
              "      <td>115.0</td>\n",
              "      <td>16.1</td>\n",
              "      <td>33.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2010</td>\n",
              "      <td>Transicion</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Puente vivero CRC</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>0.95</td>\n",
              "      <td>57.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>0.5</td>\n",
              "      <td>23.0</td>\n",
              "      <td>21.4</td>\n",
              "      <td>1.72</td>\n",
              "      <td>0.14</td>\n",
              "      <td>6.29</td>\n",
              "      <td>6.43</td>\n",
              "      <td>156.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>27.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011</td>\n",
              "      <td>Lluvias</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Estacion Julumito</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>0.95</td>\n",
              "      <td>20.0</td>\n",
              "      <td>116.2</td>\n",
              "      <td>1.6</td>\n",
              "      <td>10.0</td>\n",
              "      <td>48.4</td>\n",
              "      <td>0.90</td>\n",
              "      <td>0.10</td>\n",
              "      <td>4.50</td>\n",
              "      <td>7.30</td>\n",
              "      <td>128.0</td>\n",
              "      <td>18.5</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5bf63a4-bbb9-472e-9be7-90ce55ec1dac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d5bf63a4-bbb9-472e-9be7-90ce55ec1dac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d5bf63a4-bbb9-472e-9be7-90ce55ec1dac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c4600745-680c-459c-b0cc-1c1a6ffd0da1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4600745-680c-459c-b0cc-1c1a6ffd0da1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c4600745-680c-459c-b0cc-1c1a6ffd0da1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 78,\n  \"fields\": [\n    {\n      \"column\": \"Ano\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 2010,\n        \"max\": 2024,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          2019,\n          2021,\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Epoca\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Seca\",\n          \"Transicion\",\n          \"Lluvias\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CORRIENTE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Rio Cauca\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PUNTO DE MONITOREO_Original\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Puente vivero CRC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO_AJUSTADO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Popayan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALCALINIDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.666009825020666,\n        \"min\": 0.49,\n        \"max\": 53.2,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          2.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COLOR UPC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86.5877525660465,\n        \"min\": 2.0,\n        \"max\": 402.0,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          38.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CONDUCTIVIDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 357.5797402721481,\n        \"min\": 5.2,\n        \"max\": 2689.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          116.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DBO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.611020496951844,\n        \"min\": 0.5,\n        \"max\": 20.8,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DQO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.735943282012514,\n        \"min\": 4.0,\n        \"max\": 70.0,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          22.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DUREZA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.607948816439198,\n        \"min\": 14.4,\n        \"max\": 237.0,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          69.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NITRATOS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1911962847957047,\n        \"min\": 0.01,\n        \"max\": 4.26,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          3.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NITRITOS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3724697962039998,\n        \"min\": 0.0,\n        \"max\": 2.15,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OXIGENO DISUELTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.506651002750552,\n        \"min\": 4.153,\n        \"max\": 13.0,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          5.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2412839401925009,\n        \"min\": 2.82,\n        \"max\": 7.9,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          6.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SST\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57.41158965275981,\n        \"min\": 10.0,\n        \"max\": 369.0,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          128.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TEMPERATURA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6952333371150026,\n        \"min\": 13.2,\n        \"max\": 21.3,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          16.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TURBIEDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.448426395103695,\n        \"min\": 0.2,\n        \"max\": 156.0,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          50.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U_Bm_b49rkxj",
        "outputId": "c7defcb2-ce2a-43da-fd68-e59c0f5308ba"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 78 entries, 0 to 77\n",
            "Data columns (total 18 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   Ano                          78 non-null     int64  \n",
            " 1   Epoca                        78 non-null     object \n",
            " 2   CORRIENTE                    78 non-null     object \n",
            " 3   PUNTO DE MONITOREO_Original  78 non-null     object \n",
            " 4   MUNICIPIO_AJUSTADO           78 non-null     object \n",
            " 5   ALCALINIDAD                  78 non-null     float64\n",
            " 6   COLOR UPC                    78 non-null     float64\n",
            " 7   CONDUCTIVIDAD                78 non-null     float64\n",
            " 8   DBO                          78 non-null     float64\n",
            " 9   DQO                          78 non-null     float64\n",
            " 10  DUREZA                       78 non-null     float64\n",
            " 11  NITRATOS                     78 non-null     float64\n",
            " 12  NITRITOS                     78 non-null     float64\n",
            " 13  OXIGENO DISUELTO             78 non-null     float64\n",
            " 14  PH                           78 non-null     float64\n",
            " 15  SST                          78 non-null     float64\n",
            " 16  TEMPERATURA                  78 non-null     float64\n",
            " 17  TURBIEDAD                    78 non-null     float64\n",
            "dtypes: float64(13), int64(1), object(4)\n",
            "memory usage: 11.1+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se observa que el data set no tiene datos nulos y que tiene datos tipo float, enteros y object."
      ],
      "metadata": {
        "id": "es4c3S1uIWK9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Selección de variables: Demanda Bioquímica de Oxígeno (DBO) y Demanda Química de Oxígeno (DQO).**\n",
        "\n",
        "# **Justificación**\n",
        "\n",
        "Se seleccionaron la Demanda Química de Oxígeno (DQO) y La Demanda Bioquímica de Oxígeno a 5 días (DBO5).\n",
        "\n",
        "La DBO5 es un parámetro que mide la cantidad de oxígeno disuelto que los microorganismos aeróbicos consumen para descomponer la materia orgánica presente en una muestra de agua, durante un período de cinco días a una temperatura controlada de 20 °C. Es un indicador clave para evaluar el nivel de contaminación orgánica de corrientes hídricas. Una DBO5 elevada sugiere una alta presencia de materia orgánica biodegradable, lo que puede indicar contaminación y un posible impacto negativo en la vida acuática.\n",
        "\n",
        "Por su parte, la Demanda Química de Oxígeno (DQO) mide la cantidad de oxígeno necesaria para oxidar químicamente la materia orgánica (y algunos compuestos inorgánicos) presentes en el agua, utilizando un agente oxidante fuerte. A diferencia de la DBO5, que solo tiene en cuenta la materia biodegradable, la DQO evalúa toda la materia orgánica, proporcionando una visión más completa de la carga contaminante.\n",
        "\n",
        "Se seleccionaron estos dos parámetros, no solo por su importancia para determinar la calidad de agua y porque es posible a través de ellos determinar la eficacia de los tratamientos de aguas residuales, sino porque su relación permite medir si la materia contenida en el agua es biodegradable o no. La relación entre DBO5 y DQO es un indicador útil para entender la biodegradabilidad del agua. Una relación DBO5/DQO elevada sugiere una mayor presencia de materia orgánica fácilmente biodegradable, mientras que una relación baja puede indicar la presencia de compuestos tóxicos o difíciles de degradar.\n",
        "\n",
        "*Fuente: https://www.eurofins-environment.es/es/dbo5-dqo-analisis-aguas/*"
      ],
      "metadata": {
        "id": "0p-cB4ysIrOZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Mostras columnas del dataframe\n",
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bflJsK6kndxm",
        "outputId": "65d69f06-5aaf-4ef8-9ab3-93e43040334e"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Ano', 'Epoca', 'CORRIENTE', 'PUNTO DE MONITOREO_Original',\n",
              "       'MUNICIPIO_AJUSTADO', 'ALCALINIDAD', 'COLOR UPC', 'CONDUCTIVIDAD',\n",
              "       'DBO', 'DQO', 'DUREZA', 'NITRATOS', 'NITRITOS', 'OXIGENO DISUELTO',\n",
              "       'PH', 'SST', 'TEMPERATURA', 'TURBIEDAD'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Selección de las variables objetivo. Crear dataframe bivariado.\n",
        "df_biv = df[['Ano', 'Epoca', 'CORRIENTE', 'PUNTO DE MONITOREO_Original','MUNICIPIO_AJUSTADO','DQO','DBO']]\n",
        "df_biv.head()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZPVkCQYWm1mE",
        "outputId": "f4d6b683-014e-4913-c428-afa6532d2cf6"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Ano       Epoca  CORRIENTE PUNTO DE MONITOREO_Original MUNICIPIO_AJUSTADO  \\\n",
              "0  2010        Seca  Rio Cauca           Estacion Julumito            Popayan   \n",
              "1  2010        Seca  Rio Cauca           Puente vivero CRC            Popayan   \n",
              "2  2010  Transicion  Rio Cauca           Estacion Julumito            Popayan   \n",
              "3  2010  Transicion  Rio Cauca           Puente vivero CRC            Popayan   \n",
              "4  2011     Lluvias  Rio Cauca           Estacion Julumito            Popayan   \n",
              "\n",
              "    DQO  DBO  \n",
              "0   4.0  1.2  \n",
              "1   4.0  0.5  \n",
              "2  10.0  2.9  \n",
              "3  23.0  0.5  \n",
              "4  10.0  1.6  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7904c0f8-1494-43d2-b1bd-3a3927872bc6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ano</th>\n",
              "      <th>Epoca</th>\n",
              "      <th>CORRIENTE</th>\n",
              "      <th>PUNTO DE MONITOREO_Original</th>\n",
              "      <th>MUNICIPIO_AJUSTADO</th>\n",
              "      <th>DQO</th>\n",
              "      <th>DBO</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010</td>\n",
              "      <td>Seca</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Estacion Julumito</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2010</td>\n",
              "      <td>Seca</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Puente vivero CRC</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2010</td>\n",
              "      <td>Transicion</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Estacion Julumito</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2010</td>\n",
              "      <td>Transicion</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Puente vivero CRC</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>23.0</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011</td>\n",
              "      <td>Lluvias</td>\n",
              "      <td>Rio Cauca</td>\n",
              "      <td>Estacion Julumito</td>\n",
              "      <td>Popayan</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1.6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7904c0f8-1494-43d2-b1bd-3a3927872bc6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7904c0f8-1494-43d2-b1bd-3a3927872bc6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7904c0f8-1494-43d2-b1bd-3a3927872bc6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-67efaa4d-8f13-437c-89c2-abea76c62331\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67efaa4d-8f13-437c-89c2-abea76c62331')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-67efaa4d-8f13-437c-89c2-abea76c62331 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_biv",
              "summary": "{\n  \"name\": \"df_biv\",\n  \"rows\": 78,\n  \"fields\": [\n    {\n      \"column\": \"Ano\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 2010,\n        \"max\": 2024,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          2019,\n          2021,\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Epoca\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Seca\",\n          \"Transicion\",\n          \"Lluvias\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CORRIENTE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Rio Cauca\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PUNTO DE MONITOREO_Original\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Puente vivero CRC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO_AJUSTADO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Popayan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DQO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.735943282012514,\n        \"min\": 4.0,\n        \"max\": 70.0,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          22.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DBO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.611020496951844,\n        \"min\": 0.5,\n        \"max\": 20.8,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Análisis descriptivo general del dataframe bivariado\n",
        "df_biv.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Anj5ws8NUOw3",
        "outputId": "e065b7d9-2b4c-4ca2-9275-9ea4b3fba501"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Ano        DQO        DBO\n",
              "count    78.000000  78.000000  78.000000\n",
              "mean   2016.769231  16.891667   4.828718\n",
              "std       4.130731  11.735943   4.611020\n",
              "min    2010.000000   4.000000   0.500000\n",
              "25%    2013.250000  10.000000   0.800000\n",
              "50%    2017.000000  15.000000   2.350000\n",
              "75%    2020.750000  15.825000  10.000000\n",
              "max    2024.000000  70.000000  20.800000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f3357faf-8fca-446c-9dfd-f726718777cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ano</th>\n",
              "      <th>DQO</th>\n",
              "      <th>DBO</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>78.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>78.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2016.769231</td>\n",
              "      <td>16.891667</td>\n",
              "      <td>4.828718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.130731</td>\n",
              "      <td>11.735943</td>\n",
              "      <td>4.611020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2010.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2013.250000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2017.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>2.350000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2020.750000</td>\n",
              "      <td>15.825000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2024.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>20.800000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3357faf-8fca-446c-9dfd-f726718777cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f3357faf-8fca-446c-9dfd-f726718777cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f3357faf-8fca-446c-9dfd-f726718777cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9021952e-fe0b-445e-a63f-4218bf00aa3f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9021952e-fe0b-445e-a63f-4218bf00aa3f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9021952e-fe0b-445e-a63f-4218bf00aa3f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_biv\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Ano\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 914.8850852022874,\n        \"min\": 4.130730814630396,\n        \"max\": 2024.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2016.7692307692307,\n          2017.0,\n          78.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DQO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.953988340767644,\n        \"min\": 4.0,\n        \"max\": 78.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16.89166666666667,\n          15.0,\n          78.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DBO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.21475044091823,\n        \"min\": 0.5,\n        \"max\": 78.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.828717948717949,\n          2.3499999999999996,\n          78.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A travé de la tabla resumen puede observarse que los min y max sugieren la existencia de outliers o valores pico para ambas variables. Hay una desviación estandar mas elevada para la DQO que para la DBO. La media está afectada por los valores extremos, especialmente de la variable DQO."
      ],
      "metadata": {
        "id": "i2_DzbNW4trR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Visualización de los datos**"
      ],
      "metadata": {
        "id": "RUfR9kvRUpb8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se generan histogramas para tener una idea de las frecuencias en cada variable."
      ],
      "metadata": {
        "id": "jxoQO1DYDbtT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Histograma de DBO\n",
        "plt.hist(df_biv['DBO'], bins=20)\n",
        "plt.xlabel('DBO')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Histograma de DBO (mg/L)')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "FEmLAyGoC3WU",
        "outputId": "d6d7df3a-490e-4159-ed05-0a61cc983b19"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Histograma de DQO\n",
        "plt.hist(df_biv['DQO'], bins=20)\n",
        "plt.xlabel('DQO')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Histograma de DQO mg/L')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "O7dRaHxpDLnX",
        "outputId": "189ebe84-25d9-4a48-d1cc-6cad21855707"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Histograma bivariado\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(df_biv['DBO'], bins=20, alpha=0.7, label='DBO')\n",
        "plt.hist(df_biv['DQO'], bins=20, alpha=0.7, label='DQO')\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Histograma de DBO y DQO (mg/L)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "HQAu0GR8TrA9",
        "outputId": "9d56ceb6-09ba-42e5-c136-e47a2d15bc41"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Diagrama tipo box plot para DQO y DBO\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.boxplot(data=df_biv[['DQO', 'DBO']])\n",
        "plt.ylabel('Concentration (mg/L)')\n",
        "plt.title('Box Plot of DQO and DBO')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "Qabb_gAgTzxV",
        "outputId": "bc536578-1775-4b7e-fd1f-fdbec805ec8e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Puede observarse a partir de los box plot anteriores que no se tienen outliers en DBO, caso contrario a DQO, en donde hay valores atípicos por encima de los 22 mg/L aproximadamente. La mayor concentración de los datos se encuentra en el rango entre 0 y 16 mg/L para ambas variables,. Teniendo en cuenta que la DBO tiene valores mas bajos, en esta variable, los datos se concentran mayormente entre 2 y 10 mg/L. Por su parte, la DQO tiene concentrados los datos entre 10 y 15 mg/L. La mediana para la DQO oscila entre 12 y 14 mg/L, para la DBO, entre 2 y 5 mg/L."
      ],
      "metadata": {
        "id": "e4gvaJXdT6VT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Tablas de contingencia**\n",
        "\n",
        "Estas tablas generalmente, se usan para variables categóricas, sin embargo, se discretiza en intervalos cada variable a fin de aplicar el concepto y hacer un análisis categorizando los resultados obtenidos como se muestra a continuación."
      ],
      "metadata": {
        "id": "5lN8EK1PoDKd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se analiza la variable SST"
      ],
      "metadata": {
        "id": "bTendhOCnP5t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Se separan los datos en rangos para generar las tablas de contingencia.\n",
        "bins_DBO = [0, 15, 30, 45, 60, 75]\n",
        "bins_DQO = [0, 15, 30, 45, 60, 75]\n",
        "#Definir etiquetas para los grupos\n",
        "labels_DBO = [\"0 a 15\", \"16 a 29\", \"30 a 45\", \"46 a 60\", \"61 a 75\"]\n",
        "labels_DQO = [\"0 a 15\", \"16 a 29\", \"30 a 45\", \"46 a 60\", \"61 a 75\"]\n",
        "#Crear nueva columna con la categoría\n",
        "df[\"Rangos DBO\"] = pd.cut(df[\"DBO\"], bins=bins_DBO, labels=labels_DBO, include_lowest=True)\n",
        "df[\"Rangos DQO\"] = pd.cut(df[\"DQO\"], bins=bins_DQO, labels=labels_DQO, include_lowest=True)\n",
        "\n",
        "#Contar frecuencias por categoría\n",
        "conteo_DBO = df[\"Rangos DBO\"].value_counts().sort_index()\n",
        "conteo_DQO = df[\"Rangos DQO\"].value_counts().sort_index()\n",
        "print(conteo_DBO)\n",
        "print(conteo_DQO)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FCzjJByrVr0V",
        "outputId": "35c6ef78-a2ef-4601-8b2f-e874fcb5d7db"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rangos DBO\n",
            "0 a 15     77\n",
            "16 a 29     1\n",
            "30 a 45     0\n",
            "46 a 60     0\n",
            "61 a 75     0\n",
            "Name: count, dtype: int64\n",
            "Rangos DQO\n",
            "0 a 15     58\n",
            "16 a 29    12\n",
            "30 a 45     5\n",
            "46 a 60     2\n",
            "61 a 75     1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tabla = pd.crosstab(df[\"Rangos DBO\"], df[\"Rangos DQO\"])\n",
        "print(tabla)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r4muqw8QqDpu",
        "outputId": "ba044b22-35b7-4e6c-ea7a-387bb69aff7f"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rangos DQO  0 a 15  16 a 29  30 a 45  46 a 60  61 a 75\n",
            "Rangos DBO                                            \n",
            "0 a 15          58       12        4        2        1\n",
            "16 a 29          0        0        1        0        0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tabla.plot(kind=\"bar\", stacked=True)\n",
        "plt.title(\"Distribución DBO vs DQO\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "id": "TngZKOtyAe6M",
        "outputId": "61d0a790-2bd9-4666-91df-0fc282972fca"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Teniendo en cuenta el gráfico anterior se puede observar que si bien los datos de DQO y DBO, en su mayoría están en un rango de 0 a 15 mg/L, la DQO tiene valores mucho mayores y picos destacados que llegan hasta los 70 mg/L aproximadamente. Por el contrario, la DBO maneja valores menores a 20mg/L."
      ],
      "metadata": {
        "id": "A5yu1utcKxqk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Diagrama de dispersión para DBO y DQO\n",
        "sns.regplot(x=\"DBO\", y=\"DQO\", data=df_biv, scatter_kws={\"alpha\":0.6}, line_kws={\"color\":\"red\"})\n",
        "plt.xlabel('DBO (mg/L)')\n",
        "plt.ylabel('DQO (mg/L)')\n",
        "plt.title('Diagrama de dispersión DBO vs DQO')\n",
        "plt.show()\n",
        "\n",
        "#Lïnea de tendencia\n",
        "\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "X4uZx2IzLjts",
        "outputId": "a6a937f7-5b81-4c3b-9621-60fb0b6a37b2"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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WwwyREREFLYYZIiIiChsMcgQERFR2GKQISIiorDFIENERERhi0GGiIiIwhaDDBEREYUtBhkiIiIKWwwyREREFLYYZIiIiChsMcgQERFR2GKQISIiorDFIENERERhi0GGiIiIwhaDDBEREYUtBhkiIiIKWwwyREREFLYYZIiIiChsMcgQERFR2GKQISIiorDFIENERERhi0GGiIiIwhaDDBEREYUtBhkiIiIKWwwyREREFLYYZIiIiChsMcgQERFR2ApqkHn88cchkUg8boMHD3bvN5lMWLBgAeLi4qDValFQUICqqqog1piIiIhCSdBbZIYNG4aKigr37T//+Y973/33348tW7Zgw4YN+Oyzz3D69GnMnj07iLUlIiKiUCIPegXkciQlJbXZrtfrsXbtWrz11luYMGECAGDdunUYMmQIvvrqK4wdO7anq0pEREQhJugtMkVFRUhJSUF2djZuvfVWlJaWAgD27dsHq9WKSZMmuY8dPHgwMjIysGfPnnbLM5vNqK+v97gRERFR7xTUIDNmzBisX78en3zyCdasWYMTJ07giiuuQENDAyorK6FUKhETE+Nxn8TERFRWVrZb5rJly6DT6dy39PT0bj4LIiIiCpagXlqaNm2a+/8jRozAmDFjkJmZiffeew8ajaZLZS5duhRLlixx/1xfX88wQ0RE1EsF/dJSSzExMRg4cCCKi4uRlJQEi8WCuro6j2Oqqqq89qlxUalUiI6O9rgRERFR7xRSQcZgMODYsWNITk7G6NGjoVAosHPnTvf+I0eOoLS0FPn5+UGsJREREYWKoF5aevDBB3HdddchMzMTp0+fxmOPPQaZTIZbbrkFOp0O8+fPx5IlSxAbG4vo6GgsXLgQ+fn5HLFEREREAIIcZMrKynDLLbegpqYG8fHxuPzyy/HVV18hPj4eALBixQpIpVIUFBTAbDZjypQpWL16dTCrTERERCFEIoQQwa5Ed6qvr4dOp4Ner2d/GSIiojDh6+d3SPWRISIiIvIHgwwRERGFLQYZIiIiCltBX2uJKBw5HAIlNY1oMNkQpZYjKy4SUqkk2NUiIupzGGSI/HSwXI/3C8tQXG2A2eqASiFFboIWBaPSMDxVF+zqERH1KQwyRH44WK7Hyp1FONdoQbJOA41OBqPFjgNlepTXGrFoYh7DDBFRD2IfGSIfORwC7xeW4VyjBbkJWmjVcsikEmjVcuQmaHGu0YKNheVwOHr1jAZERCGFQYbIRyU1jSiuNiBZp4FE4tkfRiKRIFmnQVF1A0pqGoNUQyKivodBhshHDSYbzFYHNEqZ1/0apQxmqwMNJlsP14yIqO9ikCHyUZRaDpVCCqPF7nW/0WKHSiFFlJpdz4iIegqDDJGPsuIikZugRYXeiNYrewghUKE3Ii8hCllxkUGqIRFR38MgQ+QjqVSCglFpiI1UorjaAIPJBrtDwGCyobjagNhIJWaPSuV8MkREPYhBhsgPw1N1WDQxDxek6VBntKDkbCPqjBaMSIvh0GsioiDgxXwiPw1P1WFocjRn9iUiCgEMMkRdIJVKkB2vDXY1iIj6PF5aIiIiorDFIENERERhi0GGiIiIwhb7yPQAh0OwYygREVE3YJDpZgfL9Xi/sAzF1QaYrQ6oFFLkJmhRMCqNQ3WJiIjOU5eCTGlpKU6ePImmpibEx8dj2LBhUKlUga5b2DtYrsfKnUU412hBsk4DjU4Go8WOA2V6lNcaOe8IERHRefI5yJSUlGDNmjV45513UFZW5jFFu1KpxBVXXIE777wTBQUFkErZ9cbhEHi/sAznGi3ITdC6V0vWquXIVWlRXG3AxsJyDE2O5mUmIiKiLvIpcSxatAgjR47EiRMn8OSTT+LQoUPQ6/WwWCyorKzExx9/jMsvvxyPPvooRowYgb1793Z3vUNeSU0jiqsNSNZp3CHGRSKRIFmnQVF1A0pqGoNUQyIiovDnU4tMZGQkjh8/jri4uDb7EhISMGHCBEyYMAGPPfYYPvnkE5w6dQqXXHJJwCsbThpMNpitDmh0Mq/7NUoZquodaDDZerhmREREvYdPQWbZsmU+Fzh16tQuV6Y3iVLLoVJIYbTYoVW3fZqNFjtUCimivOwjIiIi3wSsM8v3338PpVIZqOLCXlZcJHITtKjQGz36EwGAEAIVeiPyEqKQFRcZpBoSERGFv4AFGSEE7HZ7oIoLe1KpBAWj0hAbqURxtQEGkw12h4DBZENxtQGxkUrMHpXKjr5ERETngcOLutHwVB0WTczDBWk61BktKDnbiDqjBSPSYjj0moiIKADYQaObDU/VYWhyNGf2JSIi6gY+B5n6+voO9zc0NJx3ZXorqVSC7HhtsKtBRETU6/gcZGJiYtrMh9KSEKLD/URERESB5nOQ2bVrV3fWg4iIiMhvPgcZu92O8ePHQybzPsEbERERUU/zedTS//3f/yE+Ph4///nP8e6773baZ4aIiIiou/kcZI4fP47du3dj6NChWL58ORITE3H11Vdj1apVKC0t7c46EhEREXklEa2nnfXR6dOnsXnzZmzevBm7du3CoEGDMGPGDMyYMQMXX3xxoOvZZfX19dDpdNDr9YiOjg52dYiIiMgHvn5+d3lCvJSUFNx99934+OOPcfbsWfzhD39ASUkJpk6diqeeeqqrxRIRERH5rMstMu2x2+04d+4c4uPjA1lsl7FFhoiIKPz4+vnt98y+K1eu9LpdIpFArVYjLy8PV1xxhb/FEhEREfnN7yCzYsUKnDlzBk1NTejXrx8AoLa2FhEREdBqtaiurkZ2djZ27dqF9PT0gFeYiIiIyMXvPjJPPfUULrnkEhQVFaGmpgY1NTU4evQoxowZgxdeeAGlpaVISkrC/fff71e5Tz/9NCQSCRYvXuzeZjKZsGDBAsTFxUGr1aKgoABVVVX+VpmIiIh6Kb+DzB/+8AesWLECOTk57m25ubn461//iqVLlyItLQ3PPPMMvvzyS5/L3Lt3L15++WWMGDHCY/v999+PLVu2YMOGDfjss89w+vRpzJ49298qExERUS/ld5CpqKiAzWZrs91ms6GyshKAc0STr4tIGgwG3HrrrXjllVfcl6oAQK/XY+3atXjuuecwYcIEjB49GuvWrcN///tffPXVV/5Wm4iIiHohv4PMVVddhbvuugv79+93b9u/fz/uueceTJgwAQBw4MABDBgwwKfyFixYgOnTp2PSpEke2/ft2wer1eqxffDgwcjIyMCePXvaLc9sNqO+vt7jRkRERL2T30Fm7dq1iI2NxejRo6FSqaBSqXDxxRcjNjYWa9euBQBotVosX76807LeeecdFBYWYtmyZW32VVZWQqlUIiYmxmN7YmKiu+XHm2XLlkGn07lv7HBMRETUe/k9aikpKQnbt2/Hjz/+iKNHjwIABg0ahEGDBrmPueqqqzot59SpU/j1r3+N7du3Q61W+1uNdi1duhRLlixx/1xfX88wQ0RE1Ev5HWRcBg8ejMGDB3f5gfft24fq6mqMGjXKvc1ut+Pzzz/H3/72N2zbtg0WiwV1dXUerTJVVVVISkpqt1xXKxERERF1I7MZMBgAjQaIiAhaNfwOMkII/POf/8SuXbtQXV0Nh8PhsX/jxo0+lTNx4kQcOHDAY9sdd9yBwYMH46GHHkJ6ejoUCgV27tyJgoICAMCRI0dQWlqK/Px8f6tNRERE56upyRleDAbANfCng8aFnuB3kFm8eDFefvllXHXVVUhMTIREIunSA0dFRWH48OEe2yIjIxEXF+fePn/+fCxZsgSxsbGIjo7GwoULkZ+fj7Fjx3bpMYmIiMgPQgCNjc7g0tgI2O3BrlEbfgeZN954Axs3bsQ111zTHfXxsGLFCkilUhQUFMBsNmPKlClYvXp1tz8uERFRn2W3e4aXdpZkdDgEyuuaUGerQ2S8FFlxkZBKu9a4cT78XjRywIAB2Lp163n1j+lJXDSSiIioE1Zr8yUjo7HTw49WNWDbD5UorWlCdUQ/OKKjkJugRcGoNAxP1QWkSr5+fvs9/Prxxx/HE088AaMPJ0pEREQhymwGamqAkyeBEyeAM2d8DjGv7ynB0coGRKkVyIiLQIxGiQNleqzcWYSD5foeqHwzvy8t3XTTTXj77beRkJCArKwsKBQKj/2FhYUBqxwREREFiBDOoNK6s64fHA6BbT9UQt9kRWZcBCQSCRqkEmjVcuSqtCiuNmBjYTmGJkf32GUmv4PMvHnzsG/fPvziF784r86+RERE1M1sNmc/l6Ym57+tRhr7q7yuCaU1TYiPUrf5/JdIJEjWaVBU3YCSmkZkx2vP67F85XeQ+eijj7Bt2zZcfvnl3VEfIiIi6ipXq0tjo/NmsQS0eIPZDovNAbXCe88UjVKGqnoHGkz+t/Z0ld9BJj09nZ1miYiIQoXF0tzq0tTU7iijQNCqZFDKpTBZHYhUydrsN1rsUCmkiFJ3eb5dv/nd2Xf58uX47W9/i5KSkm6oDhEREXXINbdLdbWzk25JibOjbgdDpQMlNSYCGXERONNgQutBz0IIVOiNyEuIQlZcZLfWoyW/I9MvfvELNDU1IScnBxEREW06+547dy5glaOucTgESmoa0WCyIUotD9rYfiIiCpCWc7s0NZ13X5eukkolmDIsCVX1Jpz8qa+M3SFgMNlQoTciNlKJ2aNSe/Qzx+8g8/zzz3dDNShQDpbr8X5hGYqrDTBbHVAppAEf2+8vBisioi7wc26XnjIwMQpz87Oa55GpaYIjWoYRaTGYPSq1xz9r/J4QL9z0pQnxDpY7x/Cfa7QgWaeBRimD0WJ3p+RFE/N6/BcsFIMVEVHIMpmaw0uAO+oGmntm3+g4RMbHBvxLqq+f3z61yDQ2NiIy0vfrXf4eT+fP4RB4v7AM5xotyE3QuofFBXNsf5tgpXMGqwNlepTXGoMSrIiIQooQzQsxNjZ2aW6XYJFKJUiPjUR6UgwQ3TNDrb3Ww5eDcnNz8fTTT6OioqLdY4QQ2L59O6ZNm4aVK1cGrILkm5KaRhRXG5Cs03Q6tr8ntA5WWrUcMtekSQlanGu0YGNhORyOXt0gSETUlsMBNDQAFRXAsWNAeTmg14dViAklPrXI7N69Gw8//DAef/xxjBw5EhdffDFSUlKgVqtRW1uLQ4cOYc+ePZDL5Vi6dCnuuuuu7q43tdJgssFsdUCjazscDuj5sf3+BKuemjSJiChobDbP/i69u1dHj/IpyAwaNAjvv/8+SktLsWHDBnzxxRf473//C6PRiP79++Oiiy7CK6+8gmnTpkEm8/5BSt0rSi2HSiGF0WKH1sv4/Z4e2x9qwYqIqMeZzc3hxWwOdm16Lb8+1TIyMvDAAw/ggQce6K76UBdlxUUiN0GLA2V65Kq0Hq0grrH9I9Jiemxsf6gFKyKibtdyLaPGRueoI+p2/BTpJaRSCQpGpaG81ui+pNN61FJPju0PtWBFRNQtHA7Pzrp2e7Br1OcwyPQiw1N1WDQxzz3cuareOdw5GGP7Qy1YEREFjGshRtfkdOzvElQMMr3M8FQdhiZHh8QEdKEUrIiIzovF0tzfxWQKdm2oBQaZXkgqlYTMSKBQClZERH5p2d8lxCen68sYZKjbhVKwIiJqF/u7hCW/g8zevXvx9ttv4+jRowCAgQMH4uc//zkuvvjigFeOiIioW1ksztDS2Mj5XcKUTzP7uvz2t7/FmDFj8P/+3/9DWVkZysrK8Morr2DMmDF46KGHuquOREREgeFaEqC6GjhxAigpAc6cYafdMOZzi8xrr72GVatWYeXKlbjrrrugUCgAAFarFWvWrMFDDz2EYcOGYe7cud1WWSIiIr+5Rhk1NjoDi8MR7BpRAPm8+vWll16KW265Bffff7/X/c899xzeeecdfPPNNwGt4PnqS6tfExHRT4zG5vDCWXW7V1IS0A2fr75+fvscZCIjI3HgwAFkZ2d73X/8+HFccMEFaGzsmUUJfcUg070cDsERSUQUfHa7Z6sLO+r2nCAHGZ8vLclkMlg6GH5mtVq5zlIfc7Bc754jxmx1zhGTm6BFwag0zhFDRN3PbG6emI5zu/RZPnf2HTVqFP7xj3+0u/+NN97AqFGjAlIpCn0Hy/VYubMIB8r0iNEokdU/EjEaJQ6UObcfLNcHu4pE1Ns4HM7QUlUFHD8OnDwJnD3LENPH+dwi8+CDD2LWrFkwm8144IEHkJiYCACorKzE8uXL8fzzz2PTpk3dVlEKHQ6HwPuFZTjXaEFuQvM6Slq1HLkqLYqrDdhYWI6hydG8zERE54fDo6kTPgeZa6+9FitWrMCDDz6I5cuXQ6dzXjrQ6/WQy+X461//imuvvbbbKkqho6Sm0b1+UsvFIAFAIpEgWadBUXUDSmoaOREeEfmHK0iTn/yaEG/hwoW4/vrrsWHDBhQVFQFwTohXUFCA9PT0bqkghZ4Gkw1mqwManfc+URqlDFX1DjSYbD1cMyIKSxweTefB75l909LS2h2CTX1DlFoOlUIKo8UOrbrtr5DRYodKIUWUl31ERHA4nP1ampo4PJrOm9+fNBs2bHAvUaBUKjFw4EDccccdmDJlSnfUj0JQVlwkchO0OFCmR65K63F5SQiBCr0RI9JikBUXGcRaElHIcDicl4uMRmd4MZvZ14UCxudRSw6HA3PmzMGcOXNw6NAh5ObmIiMjA/v378c111yDe+65BwBQU1PDTr+9nFQqQcGoNMRGKlFcbYDBZIPdIWAw2VBcbUBspBKzR6Wyoy9RX2W3Aw0NztFFJ08CxcVAeTlw7pyzJYYhhgLI5xaZF154ATt27MDmzZvbdOrdvHkz7rjjDuTk5GD9+vVcpqAPGJ6qw6KJee55ZKrqnfPIjEiLwexRqZxHhqivsVqdHXRdc7owrFAP8Xlm3xEjRmDx4sX45S9/6XX/2rVrceedd2Ly5Mn48MMPoVQqA1rRruLMvt2LM/sS9WEWi7PlxWBgP5e+LFxm9i0qKsKkSZPa3e/aF0ohhrqfVCrhEGuivsQVXhoanP8nCjKfg4xGo0FdXR0yMjK87q+vr0d0dDRDDBFRb2M2O1tdGF4oBPnc2Tc/Px9r1qxpd/+LL76I/Pz8gFSKiIiCzGgEzpwBSkqcHXZrahhiKCT53CLz+9//HldeeSVqamrw4IMPYvDgwRBC4PDhw1i+fDk+/PBD7Nq1qzvrSkRE3cXhaJ6UrrGRq0dT2PA5yFx22WV49913ceedd+L999/32NevXz+8/fbbGDduXMArSERE3cS1jhFHGlEY82tCvOuvvx5TpkzBtm3b3EsU5OXlYcqUKYiIiOiWChL1VRwRRt3CZGoeJs1LRdQL+D2zb0REBK6//vqAPPiaNWuwZs0alJSUAACGDRuGRx99FNOmTQMAmEwmPPDAA3jnnXdgNpsxZcoUrF692r3yNlFvdbBc756jx2x1ztGTm6BFwag0ztFD/nMtwmgwcBFG6nV87uwLOGf3ffXVV3Httddi+PDhuOCCCzBjxgy8/vrr8HE6Gg9paWl4+umnsW/fPnz77beYMGECZs6ciR9++AEAcP/992PLli3YsGEDPvvsM5w+fRqzZ8/2+3GIwsnBcj1W7izCgTI9YjRKZPWPRIxGiQNlzu0Hy/XBriKFOiGcSwFUVQHHjwOnTgG1tQwx1Cv5PCGeEALXXXcdPv74Y4wcOdKjs++BAwcwY8YMfPDBB+ddodjYWDz77LO44YYbEB8fj7feegs33HADAODHH3/EkCFDsGfPHowdO9an8jghHoUTh0PgTx8dcq5jldB2HaviagNGpMXgD9OH8DITeRKiub8LO+tSTwqXCfHWr1+Pzz//HDt37sRVV13lse/TTz/FrFmz8Prrr3d5eQK73Y4NGzagsbER+fn52LdvH6xWq8ckfIMHD0ZGRkaHQcZsNsPcYobJ+vr6LtWHKBhKahpRXG1Ask7jEWIAQCKRIFmnQVF1A0pqGjkRITWPNHKFF4cj2DUi6nE+X1p6++238fDDD7cJMQAwYcIE/O53v8M//vEPvytw4MABaLVaqFQq3H333di0aROGDh2KyspKKJVKxMTEeByfmJiIysrKdstbtmwZdDqd+5aenu53nYiCpcFkg9nqgEYp87pfo5TBbHWgwWTr4ZpRyLDbgfp65yKMx44BFRXOieoYYqiP8jnIfP/995g6dWq7+6dNm4b//e9/fldg0KBB+O677/D111/jnnvuwbx583Do0CG/y3FZunQp9Hq9+3bq1Kkul0XU06LUcqgUUhgt3i8LGC12qBRSRKn97qdP4cxmA+rqgLIyZ3iprHS2wHC4NJHvl5bOnTvX4WihxMRE1NbW+l0BpVKJ3NxcAMDo0aOxd+9evPDCC5gzZw4sFgvq6uo8WmWqqqqQlJTUbnkqlQoqlcrvehCFgqy4SOQmaJ19ZFRt+8hU6I0YkRaDrLjIINaSeoRrNemGBueQaSLyyucWGbvdDrm8/dwjk8lgs51/c7fD4YDZbMbo0aOhUCiwc+dO974jR46gtLSUSyFQryWVSlAwKg2xkUoUVxtgMNlgdwgYTDYUVxsQG6nE7FGp7OjbW5lMzqUATp4ETpxwLhHAEEPUIZ9bZIQQuP3229tt7TB3YQn3pUuXYtq0acjIyEBDQwPeeust7N69G9u2bYNOp8P8+fOxZMkSxMbGIjo6GgsXLkR+fr7PI5aIwtHwVB0WTcxzzyNTVe+cR2ZEWgxmj0rlPDK9ic3mvETU1OS8caQRkd98DjLz5s3r9Bh/RyxVV1dj7ty5qKiogE6nw4gRI7Bt2zZcffXVAIAVK1ZAKpWioKDAY0K83oIzt1J7hqfqMDQ5mr8fvY3d3hxampo4rwtRAPg8j0y4CtV5ZDhzK1EfIITz0pCr1YWXiag3SkwEFAogwEsVBXweGQoc18yt5xotSNZpoNHJYLTYcaBMj/JaIxZNzGOYIQpXFosztDQ2OpcG4LBo6i2EcI6YO3YMKC52zhpdXOzszzViBLBrV1CqxSDTwxwOgfcLy3Cu0eIxc6tWLUeuSoviagM2FpZjaHI0LyMQhQObzfNyUQAGPRAFld3ePE9Ry8By7JgzoHtz+HDP1rEFBpkexplbiZqFZT8xu735UpHRyH4uFL4sFqC01HsLi78DeKqqgHPngNjY7qlrBxhkeph75lZd+zO3VtVz5lbq/cKqn5hrTheDwRleiMKJyeQMJ67A4vq3tLRrLYjx8UBurvOWnQ1ceilw8cVAv36Br7sPGGR6WMuZW7VeZmflzK3UF4RFPzGLxTkZncHg/7dTomAwGJwhpXULS1lZ12aBTksDcnKab67g0rrjbTctGukrflr2MM7cSn1dSPcTY3ihcFBb2xxWWgaWqir/y5LJgIwMz7CSkwMMGBDwUUjdhUGmh7lmbi2vNbr7ymiUzm+jFXojZ26lXi/k+om5wktDg/P/RKFACKC62nsLy7lz/penVDrDScsWlpwcICvLuS+MMcgEAWdupb4sJPqJMbxQqHA4nCOEXCGlZWAxGPwvLyLCefmnZetKbq7zMpHM+3su3DHIBAlnbqW+Kmj9xMzm5kUYGV6op9lszSOEWrawHDvWtYkSdbq2rSu5uc7+KlKfl1HsFRhkgkgqlXCINfU5PdpPjOGFeprZ3DxCqGVgKSnp2lD9/v09W1dct/79AQm/+AIMMkTUw7q9n5jZ3Nxhl+GFuktjY3OLSsthzadOdW0255SUtqODcnKAmJiAV723YZAhoh4X8H5iRmPzPC+coI4Cqa6uOay0bGE5fdr/sqRSzxFCrlt2NhDJkapdxSBDREFxXv3EhHB+I25sdIYXu737K0y9lxDA2bNtW1eOHXNu95dC4RwN1LqFZcAAQKUKePX7OgYZIgoav/qJmUzN6xkZjV2b4Iv6NocDqKjw3sKi1/tfnkbjDCjZ2c0z3ebkAOnpgJwfrz2FzzQRhSbXmkauG1eRJl/Z7c6+Ki2HMrvWEGpq8r+8qKjmVpWWnW5TUvrcCKFQxCBDRKHDYmm+XGQysdWFOmaxOEcDtW5hKSnpWkfvuLi2M9xmZwMJCRwhFMIYZIgoeBwO5zdkV6tLVxawo96vqcnZmtKy70pxsbPVpSv9o5KSvLewBGnRQzo/DDJE1LPM5ubgwlYXaqm+3rN1xRVYysv9L0sicfZV8dbCouX8Xb0JgwwRdS+7vbnVpamJrS59nRDOtYJatq64AsuZM/6XJ5cDmZmeLSu5uc5RQ2p1wKtPoYdBhogCSwjnqCKjsbnVhfoeIYDKyrYLHh475pybxV8qVfMkcS1bWDIynMOdqc9ikCGi8yOEM6w0NjrDCy8X9S12u/PST8sFD12tLI2N/pcXGdl2Ov7cXOcIoV666CGdHwYZIvKfzebZSZdDo3s/i6V50cOWLSzHj3dthFBMTNvLQTk5QGIiRwiRXxhkiKhzQjRPRtfU5OywS72T0di86GHLwFJa2rX+TQkJ3gNLbGzg6059EoNMFzgcomvTqgdBONWVQozd3rx+UVMTLxf1NgaD9yn5y8r8f60lEuelH2+XhKKiuqf+RD9hkPHTwXK9e6E7s9W50F1ughYFo9L8X+ium4VTXSlEtJyQzmgMdm0oEM6dazsdf3ExUFXlf1kymXOEUOuwMmCAc7p+oiBgkPHDwXI9Vu4swrlGC5J1Gmh0Mhgtdhwo06O81ohFE/M6DAg92TpyvnWlPsJ1ycjV16WHV452OATK65pgMNuhVcmQGhPBFsOuEAKorm7bulJcDNTW+l+eUukMJ60vB2VmOvcRhRAGGR85HALvF5bhXKMFuQlaSH7qjKZVy5Gr0qK42oCNheUYmhzt9Q9xT7aOnG9dqZdztbq4RhkF6ZLR0aoGbPuhEqU1TbDYHFDKpciIi8CUYUkYmMjLEV45HM4RQq1bWI4dAxoa/C8vIsKzdcV1S0/nCCEKGwwyPiqpaURxtQHJOo07GLhIJBIk6zQoqm5ASU1jm9V8e7p15HzqSr2Qa14XgyEorS7eHK1qwOt7SqBvsiI+Sg21QgqT1YGjlQ2oqjdhbn5W3w4zVquzc23LBQ+PH3feujIvj07XtnUlN9c5VT9HCFGYY5DxUYPJBrPVAY3O+7cUjVKGqnoHGkyevfqD0TrS1bpSL2KzNc+kG2LDox0OgW0/VELfZEVmXIT7PRGpkiFCGYGTNU349w9VyI3X9v4WQ7O5eYRQyxaWkpKuBc74+LatK7m5zsUQGViol2KQ8VGUWg6VQgqjxQ6tuu3TZrTYoVJIEdVqXzBaR7paVwpjrsUXXbeuzOvRQ8rrmlBa04T4KLXX90R8lBonaxpRXteE9NjIINUywAwGz4niXIHl1KmuhcyUFM/WFddNx35v1Pfwk8xHWXGRyE3Q4kCZHrkqrccfYCEEKvRGjEiLQVac5x/eYLSOdLWuFGZMpuYWlzCaTddgtsNic0CtkHrdr1ZIUWNwwGDuwqrGwVZX13b9oGPHgIoK/8uSSp3T73sbIRTJ9y6RC4OMj6RSCQpGpaG81uhuYdEonX1dKvRGxEYqMXtUapum8GC0jnS1rhTiWl4uampyzvMShrQqGZRyZ5+YSFXbgG+yOjv+ar3sCwlCOBc3bB1Yjh8Hzp71vzyFwnOEkOs2YABHCBH5gEHGD8NTdVg0Mc89+qiq3jn6aERaDGaPSvXaYTdYrSNdqSuFENf6RSaTsx+FyRTSl4v8kRoTgYy4CBytbECEMqLNe+JMgwmDkqKRGhMRxFrCecmnosL7pHH19f6Xp9G0XfQwO9vZ6iLnn2KiruK7x0/DU3UYmhzt83wwwWwd8beuFESukUWuS0W9eAkAqVSCKcOSUFVvwsmf+sq4Ri2daTBBF6HA5GGJPfd7arM5+6q0bmE5ccL5evgrKqo5pOTlOf/NzQWSk52Xi4gooCRChMmF9S6qr6+HTqeDXq9HdHR00OrhbR6ZvIQoto70VUI4w4orvPTBJQC8zSOTGReJycMSu2fotcXiHA3UcnbbY8ecgaUrI4Ti4toOac7JcY4c4ggh6kuSkoBu+Hz19fObLTI9xN/WEa6R1AuZzc2T0BmNITUkOhgGJkYhN14b+Jl9m5o8Rwi5WlhOnepav6Lk5LaXg3JygH79zq+eRBQQDDI9SCqV+DTEmmsk9RIOhzOwBGn6/3AglUq6PsS6vr5t35Vjx5wz3/pLInHOZtu6hSU7G9By0kiiUMYgE2K4RlIYcwUX1+Uis7nPXS4KOCGcix62DivFxc6RQ/5SKDwXPXQFlqwsQK0OePWJqPsxyIQQrpEUZuz25uBiNHZt6nhyEgKorGwbWI4dc87N4i+VqvkSUMv+KxkZzjBDRL0Gg0wI4RpJIc61UrTr1otHFnUbux0oK/Oce8UVXroyQkirbTthXE6Oc+ZbLnpI1CcENcgsW7YMGzduxI8//giNRoPLLrsMf/nLXzBo0CD3MSaTCQ888ADeeecdmM1mTJkyBatXr0ZiYmIQa949uEZSCHLNntvUFNSVosOOxeJc9LDlgofFxc5RQ10JgDExnkOZXaElIYEjhIj6uKAGmc8++wwLFizAJZdcApvNhocffhiTJ0/GoUOHEPnTFNz3338/PvroI2zYsAE6nQ733XcfZs+ejS+//DKYVe8WXCMpyBwO54dsy2HRYTp7bo8xGpsXPWwZWE6e7Npzl5jovYUlNjbwdSeiXiGon4iffPKJx8/r169HQkIC9u3bh5/97GfQ6/VYu3Yt3nrrLUyYMAEAsG7dOgwZMgRfffUVxo4d26ZMs9kMc4tvfPVdmYEzSLhGUg8zmZr7tpjNvWbm3G7R0NB2Ov7iYucIIX9bqSQSIDXVs++Ka1hzVDfMH0NEvVpIfbXX6/UAgNifvn3t27cPVqsVkyZNch8zePBgZGRkYM+ePV6DzLJly/DEE0/0TIU70JV5YLhGUjdzzePS1OQML318Hhevzp3zPiV/VZX/Zclkzs61rVdozs52TtdPRBQAIRNkHA4HFi9ejHHjxmH48OEAgMrKSiiVSsTExHgcm5iYiMrKSq/lLF26FEuWLHH/XF9fj/T09G6rtzfnMw8M10gKINe0/wYD53FpSQiguro5qLRsYamt9b88pdJzDSFXC0tGBhc9JKJuFzJBZsGCBTh48CD+85//nFc5KpUKKpUqQLXyXyDmgeEaSV1ksXheLrJY+nbnXIfDeenH26RxBoP/5UVEeO+/kpbGEUJEFDQhEWTuu+8+/Otf/8Lnn3+OtLQ09/akpCRYLBbU1dV5tMpUVVUhKSkpCDXtWCDngfF1FuA+yW5v7tPi6pzblyefs1qdI4Ra92E5frxrc9vExHgGFtctOZkjhIgo5AQ1yAghsHDhQmzatAm7d+/GgAEDPPaPHj0aCoUCO3fuREFBAQDgyJEjKC0tRX5+fjCq3CHOA9MNXK0sLQNLXx1JZDZ7jhByBZeTJ7t22Sw+vm0LS26uc4QQAwsRhYmgBpkFCxbgrbfewocffoioqCh3vxedTgeNRgOdTof58+djyZIliI2NRXR0NBYuXIj8/HyvHX2DjfPAnAch2raw9NUOuQaD56KHrhaWU6e69nykpnpvYdGxvxURhb+gBpk1a9YAAK688kqP7evWrcPtt98OAFixYgWkUikKCgo8JsQLRVFqOVRyKc40mKCUSaGQSxGlkru/3fb5eWCEcLYctL5ZLM5/+9qlodrattPxHzsGVFT4X5ZU6uxc23pK/uxsZ98WIqJeKuiXljqjVqvx4osv4sUXX+yBGp0fg9mGmkYzTtUaoZJJIZdJEa2RI7u/FjERir4xD4wrrFgszQHF9a+tD7ZECeFc3LD1gofHjgE1Nf6Xp1AAAwa0bV0ZMIAjhIioT+qjTQOBd7Bcj799WgwAiFDKYXc4IJUANQYz6pusiNUqkdYvIrzngbHbm1tRbDbnv3a7560vhhXAecnn9GnvLSxdmZRRo/Gcjt91S08H5HzbEhG58C9iALQcrTQiLQa1TVacOGtAvdEGqUSCJqsdcZBg4YTc0J4HxmZr7p/iCistQ0pf7K/Sms3m7KvSunXl+HHnsG9/RUcDOTkQ2TmoS81AQ2oG5Hm5SBqUDamcQ5qJiDrDIBMArUcrxUYq0S+iHxpMNljtDljtAla7HZGqHny6HY7mIOJwNP/b8tZyn8XCoNKSxdI8Qqjl7cSJro0Q6t+/edK4losf9u+Po9UGbPuhEqU1TbAYHVAeakJG1XFMGZaEgYmcsp+IqCMMMgHgbbSSRCJBtEYBALA7BErONnZttJIQzpsrcLgu37RuKWm9v691nO2qpqbmWW1d/x475pyXpSvBLjm57fpBOTlAv35eDz9a1YDX95RA32RFfJQaaoUUJqsDRysbUFVvwtz8LIYZIvKdRNI8fYLr/+1t68ox3h5Dre6Zc2sHg0wAdLpqtdkGtQyIkqO55aNlIGkZTFoGEleIofOn13vvv1Je7n9ZUqmzr4qrVcUVWLKzAa3v8wM5HALbfqiEvsmKzLgI99xDkSoZIpQROFnThH//UIXceG349qsiCgcSifN97frXtc3bB3jLfa23+buvq+Gio/v1QQwy56OpCWhqQpbNhgvlRhw5WYmUfmpIAUiEAxIhAIcdhrONuDQpGln6KqChb/6i9QghgLNnvQeWM2f8L0+hADIzm4cx5+U1jxAKwDIY5XVNKK1pQnyU2usEivFRapysaUR5XRPSY3vxSDfqfbx90LqCQut9LQNE6w/mlsd1VPb5BAJXcKGwxSBzPhobgdpaSAFclx2F2qoanK6sdV8iMFodONNggi5CgcnDEvmtOlCEcM614m1I808rqPtFrW5uUWk5SigjwxlmuonBbIfF5oBa4f0PqVohRY3BAYO5j85kTO0Hgc5aCny9Ae2X29FjtHysltuIgoBBJkAGJkZhbn6Wu9NmjcEBpVyKQUnRmDwsMeT6OTgcAuV1TTCY7dCqZEiNiQi9oGW3A2VlntPxu/qyNDX5X55W23wZqOUlodTUoHwr06pkUMqdfWIiVW1HKJmszt8hrZd91I1coaF1S4G3lgPX8a5/OwocvgYLb60SRNQuBpkAGpgYhdx4bcgHhKNVDc2jZGzOD8uMuIjgjZKxWJzrBbUMKsXFzhFCFov/5cXGel+lOSEhpD4cUmMikBEXgaOVDYhQNveRAZyTRZ5pMGFQUjRSY/rozLwtg4G3W+vQ0N7/XWW192/rxyCisMIgE2BSqSSk+zMEdZSM0ei5hpAruJSWdm0hyMTEthPG5eQ4g0wYkEolmDIsCVX1Jpz8qa+M6/UI+0uSEgkgk3kPHq1vMpnnreXxRESdYJDpQ3pslExDQ9sVmouLnTPf+jsKSyIB0tLatq7k5Pg1QihUheQlSVcI8RYuWgeS1uHEdTxDCBH1EAaZPiTgo2TOnfMMK67AUl3tf+Xk8uYRQi1DS1aWc7r+XqxbLkm2bBFpHURabmv5b8vQQkQUJhhk+pAujZIRAqiq8h5Y6ur8r4RS6Ry+7GpZcf2bkdGnFz306ZKkVOoMfC1vLQOI62f29SCiPoRBJgiCNWKoo1EyEocd6spKjDxVguQze4CKU82BpbHR/weLiGjbfyU31zlCSMZROG1IJM6h3i1DikLhua0XhROTyYb/9+UJ7C8qxaclJggACimwZeEYDE7uH+zqEVEYYZDpYS1HDJmtdjgAJESpcNWgBIzL7d+tgSY1JgJZMUrUHi5Gruks4ipPIa6qDHGVpehXVQ6FtQsjhGJi2vZdyc11dsRlPwnvl3haBhTX//tQuHv0wwN4d+8pmG2e/aWsDmDqC19DAuDE09ODUzkiCjsSIXr3HPj19fXQ6XTQ6/WIjo4ObOFnzgC1tT4f3nLEkEYhR7XBhHqjFWabA0qZFKMy+2HOJemB6eBpMnld9FCUlEBi68KaT/Hx3kcIxcX17cDSMoy0bkHpZa0ogfDohwfwxp5SdPZHh2GGiHz9/GaLTA9pOWIoJkKBoioDLHYH1AoZtCoZ9EYb/neqDmab3b8h0AZD85Dmlv1YTp3yOkKo08iRmuo9sAQ6BIaTlmFFqWy+KRR9O8T5yWSy4d29pzoNMQAgAPxYcZaXmYioUwwyPcQ9YkirwomaRljsDmhV8hZDoOWw2ByobjB7HwJdW9t2dtviYqCy0v/KyGQQ6ekwZgxAU3omJDnZ6DdiGKQ52c6+LX2FRNK282zrPipyvkUC5f99eaLN5aSOXLfqaxQ9xVYZIuoY/0oHWGOTBSt3HUNFvRHJ0RosuioHkRFK94ghu1LAYLZDrZB5DIGWSyUwOwTSzfVQfPMj6o7uhvJkCSTHjkFdegIyPy5huSkUzhFCXoY0S5RKRADo9bFFJmtuSfF2CYh6zKla/5aVsDq6qSJE1KvwL3kAPbjhO+w7Wef++UB5Pf59uApDk6Lw22mDoJRL0WS2Q9jtSGqqQ2rNaaTUnEbK2XLn7dxpRJqN/j9wRIRzzSBXUHH9Pz29d39Yu4Ybt9eSwks/ISW9n3+xuZ1ZAoiIPPTiT7me1TrEAIDUYUdq/Rn0K/kO//30fdxmOgtd+Ukknj0Ntc3/EUJGTSSQkwPNkEHOoJKdDeTlAUlJvbNTqevST8v+KS3/ZUgJK/83bgBW7Sry+fLSloVjurlGRNQbMMgEQGNtA2oLD+Kqugpk1lUgs7YSmXUVSNNXQeHwfw2h2ohoNKRk4FxyBmoS01CTlI6zSek4bFFiULIO916ZE57r77RHLgdUqradaXtza1IfpFbLMeeSdJ9HLbGjLxH5gp8UXXH8OPDKK8B33wE//gjNyVKsFf5f0K/WxqI8LgXV8aloSM3EMV0SDqr7IzkjCYk6dZvj4812/5YQCDUSiTOgqFTNN7W6d7YmkVd/nHkBAHidR8aFQ6+JyB8MMl1x7hzw9NPuHzv6GLZLJKiIisfJfsmo6J8CW1Y2xk8bg+PRidhZ2ogzDWZIJRIo5VJEqRVQ1zahf5TKa1lelxAIRd4uBbn+T33eH2degIenDOHMvkQUEAwyXTF4cJtNVqkMZbpEnIxJwsl+yTgZ47yd0iXCKnd+gKfoVOivVWNkbg7GJUcj/wLPpQocQuBvnx7zuoQAAJiszpWRtV729ThvfVZcN/ZdoU6o1XLcNzEPmJgX7KoQUZhjkOkKrRa47z44tFpsrZXiG+jwpS0KdmnHASM7LgImO9xBpPVCgQ6HQEZcBI5WNiBCGeExPFsIgTMNJgxKikZqTA8OmnYFFZXK81+GFSIiCgEMMl21ahVKD5/A7o3fIkqtQMypOtQ0tT8SKS5CgTqTvcMgIpVKMGVYEqrqTThZ04T4KDXUCucij2caTNBFKDB5WGL3dfRVKp19VtRqQKWCQ6FESa0RDSYbooQcWdrI3tXJmIiIwh6DzHlwTXKnVkiRnxuHPcU1XsNMlEqG5BiNT0FkYGIU5uZnuReWrDE4LycNSorG5GGJgVmHCXC2qGg0zbdWnW4PluvxfuFxFFcbYLY6oFJIkZugRcGoNAxP1QWmDkREROeJQeY8aFUyKOVSd5+W/Nw4WKxW7D9Vj3qjFXYhIBNARlykX0FkYGIUcuO1Hv1nUmMizq81RCptDi0REc5LRO1cHjpYrsfKnUU412hBsk4DjU4Go8WOA2V6lNcasWhiHsMMERGFBAaZ85ARG9mmT4tSocCY7DgIh8DRMwakx2gw97JMpPfz77JM6/4zfnENc3b1aekkuLTkcAi8X1iGc40W5CZo3f10tGo5clVaFFcbsLGwHEOTo3mZiYiIgo5B5jx01qclIUqFOZdmIDNO232VcE0m13J+lvPojFtS04jiagOSdRqPzsYAIJFIkKzToKi6ASU1jciO78bzIiIi8gGDzHnq0T4trSeTU6mcaw0FUIPJBrPVAY3Oe7kapQxV9Q40mGwBfVwiIqKuYJAJgG7p0wI4Q0pkpHO4d0REj8yAG6WWQ6WQwmixQ6tu++thtNihUkgR5WUfERFRT+OnUShxDX9WqZpHEvWwrLhI5CZocaBMj1yVts1cNhV6I0akxSArLgyXSCAiol6HQSYAjlY1uC8tWWzOS0sZcRGYMizJ+6Ul12UiV2hx/RsCk8xJpRIUjEpDea3R3VdGo3SOWqrQGxEbqcTsUans6EtERCGBQeY8Ha1qwOt7SqBvsnp09j1a2YCqehPm5mdhYLLOGVYiIppbWkIgtLRneKoOiybm4f3CMhRXG1BV75xHZkRaDGaPSuXQayIiChkMMufB4RDY9kMl9E1WZMY1LykQqZJBEdkPRxoc2FAtxdLLsiGVhdcKz8NTdRiaHI2SmkbnzL5qObLiOLMvERGFFgaZ81B6rhGlPw27FjI5LCo1LCoNLCoNhEyGqGgbfqyzoORcU1gOVZZKJWFZbyIi6jsYZLrAZnPgy2NnceDHczgu1MhNSkQVZNAbrYBJAp3Ejmi19LyGKjscAiU1jdAbrag3WqFVy2Ew2RCtUUCnUXS5dcRVrrdWlo72ERERhSIGGT99+F05Xv7sGE7rTbBYHTDbpfjfD2cglUohhAAAKGRSxGtVyIyL6NJQZec6R2X4rrQOp+uMaLTaYbc7IJdKEaGSIUWnwYUZMX6ve+Qq19v6SQDa3cc+MUREFKqC2nHj888/x3XXXYeUlBRIJBJ88MEHHvuFEHj00UeRnJwMjUaDSZMmoaioKDiVhTPEPPmvQyitaUKEQgadRg7hAGwOwGJzQCqRQCmTwu4QOF1nRGFpHWIjlH4NVXatc/T18Rqc1ptgttlhszlgtQtY7HaYrHZU1Bnx9fEarNxZhIPler/KPVCmR4xGiaz+kYjRKHGgTI8nPzqEJ/91yOs+fx6DiIiopwU1yDQ2NmLkyJF48cUXve5/5plnsHLlSrz00kv4+uuvERkZiSlTpsBkMvVwTZ2Xk17+7BiMFjsSolVQK2RostohWhxjsTkgkQByqQQCgMXucLfS+MK1zlGNwQybXcBmt8Px0901CikkkAACsAkBm13gXKMFGwvL4XB0/Bit10/SquWQSSXO9ZPiI3H8TCOOn21ETnyk574Erc+PQUREFAxBvbQ0bdo0TJs2zes+IQSef/55/OEPf8DMmTMBAK+//joSExPxwQcf4Oabb/Z6P7PZDLPZ7P65vr4+IHX98thZnNabEK1RQCKRwmJzwGhxeAQZAaDJYodCJoVaIYNcCpTrTT6vS+Ra5yhao0R5nQlKuQxNFivkUgkkEgnkMgksdoFIlRT1JhtS+/m27lFH6ycZLHY4fgpbBrMd0ZrmbMu1lYiIKNSF7JjgEydOoLKyEpMmTXJv0+l0GDNmDPbs2dPu/ZYtWwadTue+paenB6Q+ZxqcrSQqufMpM9vssNodAICW0UAC5xQx0WoZ5DLnVP++dvZ1rXMkkwJ2h4AEzkDnyh4SSfPPdoeATCKB2dp5Z2L3+knKtusnWW0OuNKY63xa0ihlPj0GERFRMIRskKmsrAQAJCYmemxPTEx07/Nm6dKl0Ov17tupU6cCUp/4KBXkMgnMNgcAgSaL5we7K8wo5VJAwP3Br1HKfO7s61rnyO4AZD9dnpJIJHBdnRKi+WeZVAK7ED51Jm65flJrCrnUXXmFl7luuLYSERGFspANMl2lUqkQHR3tcQuEcTn9kaJTo95odXbAtQu4MoD46SaVAHKZFDKpBCars3/MiFSdz519Xesc1RstiFbLYbHZoZBJYHMICCFgszuglElgsTsQrZajwWRDXkJUp+W7yq3QG9v02dEqZZBKJJBKJNCqPFtsXGsr+fIYREREwRCyQSYpKQkAUFVV5bG9qqrKva8nyeVS3DU+BxqlDDUGCxxCQC6Veqw0IJdK4HAIWO0OOAAk6zQoGJ3m81wsrnWO4rTO1h+5TAbXXY1WBwQEIAHkP/WX8XXdI1e5sZFKFFcbYDDZYHcIGEw2FJ9pRHZ8JLL7R+LYmUbPfdUGrq1EREQhLWSDzIABA5CUlISdO3e6t9XX1+Prr79Gfn5+UOo088JU/OHaoUiJ0cAhAKtDQCqRQCF1Drt2jVSSSiWIjVBg4YQ8v+dgca1zNCY7Dik6NVRyGeRyKRQyKZQyGdQKOZJjNBib3R+LJvpevqvcC9J0qDNaUHK2EXVGC0akxeAP04fiD9cO9brPn8cgIiLqaUHt+GAwGFBcXOz++cSJE/juu+8QGxuLjIwMLF68GE8++STy8vIwYMAAPPLII0hJScGsWbOCVueZF6Zi2tAk3Pd2IY5WG5AZF4GkKBUMFjv0RiuEQ6DOZMWlWXG4emhi5wV60XKdo0DO7NvZ+klcW4mIiMJNUIPMt99+i6uuusr985IlSwAA8+bNw/r16/Hb3/4WjY2NuPPOO1FXV4fLL78cn3zyCdRqdbCqDABQKmVYNGkgVu4swrlGC5rUApEqBaQSKSr0RqTGRPh1Scmb7lrnqKNyubYSERGFG4nwZ8a2MFRfXw+dTge9Xh+wjr8u3qb8z0uIwuxRqbwcQ0REdB58/fzmmNrz0NmlGiIiIupeDDLniZdjiIiIgidkRy0RERERdYYtMj3A4RC8/ERERNQNGGS6mbcOwbkJWhSMSmOHYCIiovPEINONDpbr3UO0k3UaaHQyGC12HCjTo7zWyMnmiIiIzhP7yHQTh0Pg/cIynGu0IDdBC61aDplUAq1ajtwELc41WrCxsBwOR68e/U5ERNStGGTOk8MhcPyMAf87VYfjZwzuYFJS04jiagOSdRpIJJ79YSQSCZJ1GhRVN6CkpjEY1SYiIuoVeGnpPHTU/8XuEDBbHdDoZF7vq1HKUFXvQIPJ1sO1JiIi6j0YZLqos/4vBaNSoVJIYbTYoVW3fZqNFjtUCimivOwjIiIi3/DSUhf40v/lq+PnkBMfiQq9Ea1XgRBCoEJvRF5CFLLiIoN0FkREROGPQaYLfOn/UnzGgPzs/oiNVKK42gCDyQa7Q8BgsqG42oDYSCVmj0rlfDJERETngUGmCxpMNmf/F2X7/V/MVgeSdGosmpiHC9J0qDNaUHK2EXVGC0akxXDoNRERUQCwg0YXRKnlPvd/yY7XcmFJIiKibsIg0wVZcZHITdDiQJkeuSqtx+UlV/+XEWkx7v4vXFiSiIioe/DSUhdIpRIUjEpj/xciIqIgY4tMFw1P1WHRxDz3PDJV9c55ZEakxWD2qNSA9X/hgpNERETtY5A5D8NTdd3a/4ULThIREXWMQaYLLBY7Nn1XjvI6I5J1aozK6AeHEDh1rgl6oxU6jcIj0LRuVcnoF4HS2qYOw093LTjJFh4iIupNGGT89OKuIqz94gTqTTY4hIAQgFQCaBQyyOVSqGRSpMRocGFGDApGpQGAR6uK1e6A2WaHSi6DQib12srSesI9V2dirVqOXJUWxdUGbCwsx9DkaL9CCFt4iIiot2GQ8cOLu4rwwo4i2BwCcqkEQgAOAHYBGCx2REkksEsFTutNMB+vweHT9YAEsNkFknUamOV2fF9WB4PZhki1AiPSdFDLZW1aWfxZcNLX0VDd1cJDREQUTBy15COLxY61X5yAzSEQoZACcAaMlk9go8WGKKUMdoez5eX4GQNOnGlEbnwktCoZSs41wiYEEqJVsDscKK1pRKRK5l7WYGNhORwO4fOEe74uOOnLkgquxyYiIgonDDI+2vRdOepNNijlUghIYRcCEokEAq5IAzh+apmJUMpR22iF1QHYhYDBYkeD2YZ6ow0RSjkkEikilHLojTY0mGxtWllaTrjnjb8LTvrTwkNERBROGGR8VF5nhEMIyCUSCAhACADOFoyW2cDmEJBJJbA5hHOxSAFYbQ5YbQ7Yf7okBQAyqQR2h4DV7gDg2crimnAvUAtOBrqFh4iIKFQwyPgoNUYDqUQCmxCQQPJTenGGkpZZQ/5TQJFLJc7WDwmgkEuhkEvdAQcA7D8FHoXM+RK0bGUJ9IR7gW7hISIiChUMMj66/sJURKvlsNgckMABmUQCIQQkcLXLOEcvaZUyNFls6BepgEIKyCQSaJUyRKnkiNbI0WSxQQgHmiw26DRyRKnlXltZXBPuBWLByUC38BAREYUKfgX3kVIpw/wrBuCFHUVosjqco5bgHLXkEqmUo8Fih1wqhUImdY4okgDFZxqRrNMgMzYS9U1WVNeboVUrkBEXiUazHRV6o9dWlkBNuOdq4SmvNbr7ymiUzlFL7T02ERFROJCI1l/Re5n6+nrodDro9XpER0efd3m+ziNzUUY/zB6VCqDzeWTyEqICuqxBe7zNI9NTj01EROQPXz+/GWS6wNvMvk1WO+qNVkRrFAGZ2be7cGZfIiIKBwwyP+mOIENERETdy9fPb3b2JSIiorDFIENERERhi0GGiIiIwhaDDBEREYUtBhkiIiIKWwwyREREFLYYZIiIiChsMcgQERFR2GKQISIiorDV6xeNdE1cXF9fH+SaEBERka9cn9udLUDQ64NMQ0MDACA9PT3INSEiIiJ/NTQ0QKdrf2HjXr/WksPhwOnTpxEVFQWJpOPFEevr65Geno5Tp071ynWZevP59eZzA3r3+fXmcwN4fuGsN58bEPrnJ4RAQ0MDUlJSIJW23xOm17fISKVSpKWl+XWf6OjokHxRA6U3n19vPjegd59fbz43gOcXznrzuQGhfX4dtcS4sLMvERERhS0GGSIiIgpbDDItqFQqPPbYY1CpVMGuSrfozefXm88N6N3n15vPDeD5hbPefG5A7zm/Xt/Zl4iIiHovtsgQERFR2GKQISIiorDFIENERERhi0GGiIiIwlafCzIvvvgisrKyoFarMWbMGHzzzTcdHr9hwwYMHjwYarUaF1xwAT7++OMeqql/li1bhksuuQRRUVFISEjArFmzcOTIkQ7vs379ekgkEo+bWq3uoRr75/HHH29T18GDB3d4n3B57bKystqcm0QiwYIFC7weH+qv2+eff47rrrsOKSkpkEgk+OCDDzz2CyHw6KOPIjk5GRqNBpMmTUJRUVGn5fr73u0OHZ2b1WrFQw89hAsuuACRkZFISUnB3Llzcfr06Q7L7Mrvdnfp7LW7/fbb29R16tSpnZYb6q8dAK/vQYlEgmeffbbdMkPltfPl77/JZMKCBQsQFxcHrVaLgoICVFVVdVhuV9+rPa1PBZl3330XS5YswWOPPYbCwkKMHDkSU6ZMQXV1tdfj//vf/+KWW27B/PnzsX//fsyaNQuzZs3CwYMHe7jmnfvss8+wYMECfPXVV9i+fTusVismT56MxsbGDu8XHR2NiooK9+3kyZM9VGP/DRs2zKOu//nPf9o9Npxeu71793qc1/bt2wEAN954Y7v3CeXXrbGxESNHjsSLL77odf8zzzyDlStX4qWXXsLXX3+NyMhITJkyBSaTqd0y/X3vdpeOzq2pqQmFhYV45JFHUFhYiI0bN+LIkSOYMWNGp+X687vdnTp77QBg6tSpHnV9++23OywzHF47AB7nVFFRgVdffRUSiQQFBQUdlhsKr50vf//vv/9+bNmyBRs2bMBnn32G06dPY/bs2R2W25X3alCIPuTSSy8VCxYscP9st9tFSkqKWLZsmdfjb7rpJjF9+nSPbWPGjBF33XVXt9YzEKqrqwUA8dlnn7V7zLp164ROp+u5Sp2Hxx57TIwcOdLn48P5tfv1r38tcnJyhMPh8Lo/nF43AGLTpk3unx0Oh0hKShLPPvuse1tdXZ1QqVTi7bffbrccf9+7PaH1uXnzzTffCADi5MmT7R7j7+92T/F2fvPmzRMzZ870q5xwfe1mzpwpJkyY0OExofratf77X1dXJxQKhdiwYYP7mMOHDwsAYs+ePV7L6Op7NRj6TIuMxWLBvn37MGnSJPc2qVSKSZMmYc+ePV7vs2fPHo/jAWDKlCntHh9K9Ho9ACA2NrbD4wwGAzIzM5Geno6ZM2fihx9+6InqdUlRURFSUlKQnZ2NW2+9FaWlpe0eG66vncViwZtvvolf/vKXHS5yGk6vW0snTpxAZWWlx2uj0+kwZsyYdl+brrx3Q4Ver4dEIkFMTEyHx/nzux1su3fvRkJCAgYNGoR77rkHNTU17R4brq9dVVUVPvroI8yfP7/TY0PxtWv993/fvn2wWq0er8PgwYORkZHR7uvQlfdqsPSZIHP27FnY7XYkJiZ6bE9MTERlZaXX+1RWVvp1fKhwOBxYvHgxxo0bh+HDh7d73KBBg/Dqq6/iww8/xJtvvgmHw4HLLrsMZWVlPVhb34wZMwbr16/HJ598gjVr1uDEiRO44oor0NDQ4PX4cH3tPvjgA9TV1eH2229v95hwet1acz3//rw2XXnvhgKTyYSHHnoIt9xyS4cL8vn7ux1MU6dOxeuvv46dO3fiL3/5Cz777DNMmzYNdrvd6/Hh+tq99tpriIqK6vTSSyi+dt7+/ldWVkKpVLYJ1J19/rmO8fU+wdLrV7/uixYsWICDBw92eq02Pz8f+fn57p8vu+wyDBkyBC+//DL+9Kc/dXc1/TJt2jT3/0eMGIExY8YgMzMT7733nk/fmsLF2rVrMW3aNKSkpLR7TDi9bn2V1WrFTTfdBCEE1qxZ0+Gx4fS7ffPNN7v/f8EFF2DEiBHIycnB7t27MXHixCDWLLBeffVV3HrrrZ12og/F187Xv/+9SZ9pkenfvz9kMlmbXtpVVVVISkryep+kpCS/jg8F9913H/71r39h165dSEtL8+u+CoUCF110EYqLi7updoETExODgQMHtlvXcHztTp48iR07duD//u///LpfOL1uruffn9emK+/dYHKFmJMnT2L79u0dtsZ409nvdijJzs5G//79261ruL12APDFF1/gyJEjfr8PgeC/du39/U9KSoLFYkFdXZ3H8Z19/rmO8fU+wdJngoxSqcTo0aOxc+dO9zaHw4GdO3d6fLttKT8/3+N4ANi+fXu7xweTEAL33XcfNm3ahE8//RQDBgzwuwy73Y4DBw4gOTm5G2oYWAaDAceOHWu3ruH02rmsW7cOCQkJmD59ul/3C6fXbcCAAUhKSvJ4berr6/H111+3+9p05b0bLK4QU1RUhB07diAuLs7vMjr73Q4lZWVlqKmpabeu4fTauaxduxajR4/GyJEj/b5vsF67zv7+jx49GgqFwuN1OHLkCEpLS9t9HbryXg2aIHc27lHvvPOOUKlUYv369eLQoUPizjvvFDExMaKyslIIIcRtt90mfve737mP//LLL4VcLhd//etfxeHDh8Vjjz0mFAqFOHDgQLBOoV333HOP0Ol0Yvfu3aKiosJ9a2pqch/T+vyeeOIJsW3bNnHs2DGxb98+cfPNNwu1Wi1++OGHYJxChx544AGxe/duceLECfHll1+KSZMmif79+4vq6mohRHi/dkI4R3JkZGSIhx56qM2+cHvdGhoaxP79+8X+/fsFAPHcc8+J/fv3u0fuPP300yImJkZ8+OGH4vvvvxczZ84UAwYMEEaj0V3GhAkTxKpVq9w/d/beDYVzs1gsYsaMGSItLU189913Hu9Ds9nc7rl19rsdKufX0NAgHnzwQbFnzx5x4sQJsWPHDjFq1CiRl5cnTCZTu+cXDq+di16vFxEREWLNmjVeywjV186Xv/933323yMjIEJ9++qn49ttvRX5+vsjPz/coZ9CgQWLjxo3un315r4aCPhVkhBBi1apVIiMjQyiVSnHppZeKr776yr1v/PjxYt68eR7Hv/fee2LgwIFCqVSKYcOGiY8++qiHa+wbAF5v69atcx/T+vwWL17sfi4SExPFNddcIwoLC3u+8j6YM2eOSE5OFkqlUqSmpoo5c+aI4uJi9/5wfu2EEGLbtm0CgDhy5EibfeH2uu3atcvr76LrHBwOh3jkkUdEYmKiUKlUYuLEiW3OOzMzUzz22GMe2zp67/aUjs7txIkT7b4Pd+3a5S6j9bl19rvdkzo6v6amJjF58mQRHx8vFAqFyMzMFL/61a/aBJJwfO1cXn75ZaHRaERdXZ3XMkL1tfPl77/RaBT33nuv6Nevn4iIiBDXX3+9qKioaFNOy/v48l4NBRIhhOieth4iIiKi7tVn+sgQERFR78MgQ0RERGGLQYaIiIjCFoMMERERhS0GGSIiIgpbDDJEREQUthhkiIiIKGwxyBAREVHYYpAhorBz22234amnngp2Ndo4e/YsEhISUFZWFuyqEPUZDDJE1KHbb78dEokEEokECoUCiYmJuPrqq/Hqq6/C4XB4HJuVleU+ViaTISUlBfPnz0dtba3HcefOncPixYuRmZkJpVKJlJQU/PKXv0RpaWmn9fnf//6Hjz/+GIsWLQroeXbktddew+WXXw4AuPLKK7F48WKvx/Xv3x9z587FY4891mN1I+rrGGSIqFNTp05FRUUFSkpKsHXrVlx11VX49a9/jWuvvRY2m83j2D/+8Y+oqKhAaWkp/vGPf+Dzzz/3CB3nzp3D2LFjsWPHDrz00ksoLi7GO++8g+LiYlxyySU4fvx4h3VZtWoVbrzxRmi12m45V28+/PBDzJgxw6dj77jjDvzjH//AuXPnurlWRAQwyBCRD1QqFZKSkpCamopRo0bh4YcfxocffoitW7di/fr1HsdGRUW5j73qqqswb948FBYWuvf//ve/x+nTp7Fjxw5MmzYNGRkZ+NnPfoZt27ZBoVBgwYIF7dbDbrfjn//8J6677jqP7VlZWXjyyScxd+5caLVaZGZmYvPmzThz5gxmzpwJrVaLESNG4Ntvv/W43yuvvIL09HRERETg+uuvx3PPPYeYmBiPY0wmE/7973/7HGSGDRuGlJQUbNq0yafjiej8MMgQUZdMmDABI0eOxMaNG9s9pry8HFu2bMGYMWMAAA6HA++88w5uvfVWJCUleRyr0Whw7733Ytu2be22Znz//ffQ6/W4+OKL2+xbsWIFxo0bh/3792P69Om47bbbMHfuXPziF79AYWEhcnJyMHfuXLjWyf3yyy9x991349e//jW+++47XH311fjzn//cptydO3ciNTUVgwcP9vm5ufTSS/HFF1/4fDwRdR2DDBF12eDBg1FSUuKx7aGHHoJWq4VGo0FaWhokEgmee+45AMCZM2dQV1eHIUOGeC1vyJAhEEKguLjY6/6TJ09CJpMhISGhzb5rrrkGd911F/Ly8vDoo4+ivr4el1xyCW688UYMHDgQDz30EA4fPoyqqioAzktU06ZNw4MPPoiBAwfi3nvvxbRp09qU689lJZeUlBScPHnSr/sQUdcwyBBRlwkhIJFIPLb95je/wXfffYfvv/8eO3fuBABMnz4ddrvd435dYTQaoVKp2jwmAIwYMcL9/8TERADABRdc0GZbdXU1AODIkSO49NJLPcpo/bMQAlu2bPE7yGg0GjQ1Nfl1HyLqGnmwK0BE4evw4cMYMGCAx7b+/fsjNzcXAJCXl4fnn38e+fn52LVrFyZMmICYmBgcPny43fIkEon7/q31798fTU1NsFgsUCqVHvsUCoX7/66g421b65FWHfnmm29gs9lw2WWX+XwfwNmhOT4+3q/7EFHXsEWGiLrk008/xYEDB1BQUNDhcTKZDICzNUUqleKmm27CW2+9hcrKSo/jjEYjVq9ejSlTpiA2NtZrWRdeeCEA4NChQ+dd/0GDBmHv3r0e21r//OGHH2L69Onuc/DVwYMHcdFFF513HYmocwwyRNQps9mMyspKlJeXo7CwEE899RRmzpyJa6+9FnPnzvU4tqGhAZWVlaioqMA333yD3/zmN4iPj3e3ajz11FNISkrC1Vdfja1bt+LUqVP4/PPPMWXKFFitVrz44ovt1iM+Ph6jRo3Cf/7zn/M+p4ULF+Ljjz/Gc889h6KiIrz88svYunWrx2WrzZs3e72sdObMGXz33XceN1ffm6amJuzbtw+TJ08+7zoSkQ8EEVEH5s2bJwAIAEIul4v4+HgxadIk8eqrrwq73e5xbGZmpvtYACI+Pl5cc801Yv/+/R7HnTlzRixcuFCkp6cLhUIhEhMTxe233y5OnjzZaX1Wr14txo4d2+ZxV6xY4bENgNi0aZP75xMnTggAHnX5+9//LlJTU4VGoxGzZs0STz75pEhKShJCCFFcXCxUKpUwGAwe5Y4fP97jHF23P/3pT0IIId566y0xaNCgTs+DiAJDIkQXe90REQWB0WjEoEGD8O677yI/Pz+gZf/qV7/Cjz/+iC+++ALPPfccduzYgY8//tivMsaOHYtFixbh5z//eUDrRkTesbMvEYUVjUaD119/HWfPnj3vsv7617/i6quvRmRkJLZu3YrXXnsNq1evBgCkpaVh6dKlfpV39uxZzJ49G7fccst5142IfMMWGSLqs2666Sbs3r0bDQ0NyM7OxsKFC3H33XcHu1pE5AcGGSIiIgpbHLVEREREYYtBhoiIiMIWgwwRERGFLQYZIiIiClsMMkRERBS2GGSIiIgobDHIEBERUdhikCEiIqKw9f8BpkcEoWz1lUAAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El gráfico anterior representa que no se observa una tendencia lineal o relación lineal claea entre las dos variables. Sin embargo, sí se puede observar que los valores mas altos de DBO están vinculados a valores de DQO por encima de los 15 mg/L aproximadamente."
      ],
      "metadata": {
        "id": "4REpvR-RMBuD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Matriz de correlación***"
      ],
      "metadata": {
        "id": "tglPec7AD1Tg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Calcular correlación entre DQO, y SST\n",
        "\n",
        "corr=df[['DQO','DBO']].corr()\n",
        " # Heatmap\n",
        "sns.heatmap(corr,  annot=True, fmt=\".2f\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "AAG1js7YD6A1",
        "outputId": "1b3ae4fc-a0de-4fe1-aa0d-154958aff75a"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df[\"DQO\"].corr(df[\"DBO\"])\n",
        "print(\"Correlación Pearson:\", corr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gY6xM2UYRcLI",
        "outputId": "ef6e17ec-8479-4cd7-f870-b8f5fc0fefcc"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlación Pearson: 0.2783568499559853\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Regresión lineal simple entre DQO y DBO\n",
        "\n",
        "X = sm.add_constant(df[\"DBO\"])\n",
        "y = df[\"DQO\"]\n",
        "modelo = sm.OLS(y, X).fit()\n",
        "print(modelo.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vFqEYHGwSBnz",
        "outputId": "a45cc20f-8bc5-45ce-858b-34b6fd754e3d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                    DQO   R-squared:                       0.077\n",
            "Model:                            OLS   Adj. R-squared:                  0.065\n",
            "Method:                 Least Squares   F-statistic:                     6.383\n",
            "Date:                Thu, 04 Sep 2025   Prob (F-statistic):             0.0136\n",
            "Time:                        03:07:22   Log-Likelihood:                -299.12\n",
            "No. Observations:                  78   AIC:                             602.2\n",
            "Df Residuals:                      76   BIC:                             606.9\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const         13.4707      1.867      7.217      0.000       9.753      17.188\n",
            "DBO            0.7085      0.280      2.527      0.014       0.150       1.267\n",
            "==============================================================================\n",
            "Omnibus:                       53.956   Durbin-Watson:                   1.071\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              179.935\n",
            "Skew:                           2.326   Prob(JB):                     8.47e-40\n",
            "Kurtosis:                       8.808   Cond. No.                         9.79\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como puede observarse en el anáisis de correlación, no hay relación entre las variables, estas son independientes entre ellas. Según el resultado de OLS, el R2 con un valor tan bajo corrobora que un modelo lineal no representa la relación de las variables."
      ],
      "metadata": {
        "id": "Rxdge8y6EQQK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "TxShAfafUCey"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Probando varios grados de polinomio:\n",
        "\n",
        "for grado in range(1,5):  # prueba de 1 a 4\n",
        "    poly = PolynomialFeatures(degree=grado)\n",
        "    X_poly = poly.fit_transform(X)\n",
        "    modelo = LinearRegression().fit(X_poly, y)\n",
        "    y_pred = modelo.predict(X_poly)\n",
        "    print(f\"Grado {grado} → R²: {r2_score(y, y_pred):.3f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "enYVh9roUQbF",
        "outputId": "3db67e93-b472-4d76-b2c3-1cf2a13c1741"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Grado 1 → R²: 0.077\n",
            "Grado 2 → R²: 0.086\n",
            "Grado 3 → R²: 0.130\n",
            "Grado 4 → R²: 0.280\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df[[\"DBO\"]]   # predictor\n",
        "y = df[\"DQO\"]     # variable dependiente\n",
        "\n",
        "# Crear polinomio grado 4\n",
        "poly = PolynomialFeatures(degree=4)\n",
        "X_poly = poly.fit_transform(X)\n",
        "\n",
        "# Ajustar modelo\n",
        "modelo = LinearRegression()\n",
        "modelo.fit(X_poly, y)\n",
        "\n",
        "# Predicciones\n",
        "y_pred = modelo.predict(X_poly)\n",
        "\n",
        "# Evaluación\n",
        "print(\"R²:\", r2_score(y, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s1TeLui4VMLw",
        "outputId": "5cd3307c-45cc-4375-ccee-f9fdb0013415"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R²: 0.27954907177069\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_nuevo = np.linspace(X.min(), X.max(), 100).reshape(-1,1)\n",
        "X_nuevo_poly = poly.transform(X_nuevo)\n",
        "y_nuevo = modelo.predict(X_nuevo_poly)\n",
        "\n",
        "plt.scatter(X, y, alpha=0.6)\n",
        "plt.plot(X_nuevo, y_nuevo, color=\"red\", linewidth=2)\n",
        "plt.xlabel(\"DQO (mg/L)\")\n",
        "plt.ylabel(\"DBO (mg/L)\")\n",
        "plt.title(\"Ajuste polinomial\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 529
        },
        "id": "BCATBeoHUxH-",
        "outputId": "8b4bdacb-541c-4ace-9a84-ee4260ef6532"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but PolynomialFeatures was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lo anterior no muestra tampoco una relación clara de las variables puesto que es un R2 muy pequeño aun."
      ],
      "metadata": {
        "id": "IXMCiop0WfJ4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Distribución de la relación DBO/DQO***\n",
        "\n",
        "Es importante tener en cuenta que las variables fueron seleccionadas precisamente porque su relación otorga una interpretación sobre qué tan biodegradable es la materia que se encuentra en el agua monitoreada.\n",
        "\n",
        "Los resultados de la relación de biodegradabilidad se leen de la siguiente manera:\n",
        "\n",
        "*   > 0.5: Alta biodegradabilidad (los contaminantes son mayormente biodegradables).\n",
        "*   0.3 - 0.5: Biodegradabilidad moderada.\n",
        "*   < 0.3: Baja biodegradabilidad (predominan compuestos refractarios o tóxicos)."
      ],
      "metadata": {
        "id": "aEHlfFtcu8aY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Relación DBO/DQO:\n",
        "\n",
        "df['Relacion_DBO_DQO'] = df['DBO'] / df['DQO']\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.histplot(df['DBO_DQO_Ratio'], bins=20, kde=True)\n",
        "plt.axvline(0.3, color='red', linestyle='--', label='Límite baja biodegradabilidad')\n",
        "plt.axvline(0.5, color='green', linestyle='--', label='Límite alta biodegradabilidad')\n",
        "plt.legend()\n",
        "plt.title(\"Distribución de la relación DBO/DQO\")\n",
        "plt.xlabel(\"DBO/DQO Ratio\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "NWPVMWp-t2b4",
        "outputId": "eeeb70c4-2d8d-4018-d0b6-f5b6c9f5d649"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Según lo mostrado en el histograma anterior, la mayoría de los datos están concentrados por debajo de 0.3, lo cual indica que gran parte de las muestras presentan baja biodegradabilidad (predominan compuestos no biodegradables o resistentes a la degradación biológica).\n",
        "\n",
        "Un grupo pequeño se encuentra entre 0.3 y 0.5 de modo que tienen biodegradabilidad moderada.\n",
        "\n",
        "Otra parte de los datos se sitúa por encima de 0.5 (incluso con un pico cerca de 0.65), indicando muestras con alta biodegradabilidad, donde la fracción biodegradable de la materia orgánica es importante."
      ],
      "metadata": {
        "id": "7xME3L50vqyg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Conclusiones y recomendaciones:**\n",
        "**bold text**\n",
        "De acuerdo con los resultados observados a través del resumen y las visualizaciones, se puede concluir que las dos variables no guardan una relación lineal, inclusive a través de través de regresión polinomial no se posible describir una relación definida, hecho que podría sugerir la necesidad de trabajar los datos a través de grupos dentro de los cuales sí se pueda definir una tendencia o relación entre las variables, o en su defecto, agregar temporalidad (periodo de medición, época, año, entre otros) para definir una mejor relación entre las variables.\n",
        "\n",
        "Se pudo observar que en cuanto a la DQO la mediana está alrededor de 12-14 mg/L, presenta valores típicos entre 10 y 17 mg/L y existen  muchos outliers hacia arriba (varios puntos sobre 25-45 mg/L). Esto indica que, aunque normalmente la DQO se mantiene baja-moderada, en ocasiones se presentan picos muy altos de contaminación química (compuestos no biodegradables, descargas puntuales, etc.).\n",
        "\n",
        "Por otro lado, en la DBO, la mediana es baja, cerca de 2-3 mg/L. Esta varaiable tiene valores típicos entre 1 y 10 mg/L, hay menos dispersión y prácticamente sin outliers comparado con la DQO, este resultado muestra que la contaminación biodegradable es generalmente baja, más estable y menos variable.\n",
        "\n",
        "Aunado a lo anterior, se complementa el resultado de biodegradabilidad con la relación DBO/DQO, puesto que el hecho de que muchas muestras estén por debajo de *0.3 sugiere que en la corriente de agua hay descargas con contaminantes industriales o compuestos químicos de difícil degradación.*\n",
        "\n",
        "Los casos >0.5 en la relación DBO/DQO, muestran periodos o estaciones donde las descargas son mayormente de origen orgánico y biodegradable (ej. aguas residuales domésticas).\n",
        "\n",
        "Así las cosas, la dispersión observada implica que la calidad del agua no es homogénea: en algunos puntos hay aguas con buena capacidad de biodegradación, pero en la mayoría predomina contaminación difícil de tratar biológicamente."
      ],
      "metadata": {
        "id": "dthr_pmyP2Wv"
      }
    }
  ]
}
